 /*
 * Copyright 2019-present, Infosys Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef __S1HandoverProcedureContextManager__
#define __S1HandoverProcedureContextManager__
/******************************************************
* s1HandoverProcedureContextManager.h
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/blockPoolManager.h.tt>
 ***************************************/
#include "memPoolManager.h"

namespace mme
{
	class S1HandoverProcedureContext;
	class S1HandoverProcedureContextManager
	{
		public:
			/****************************************
			* S1HandoverProcedureContextManager
			*  constructor
			****************************************/
			S1HandoverProcedureContextManager(int numOfBlocks);
			
			/****************************************
			* S1HandoverProcedureContextManager
			*    Destructor
			****************************************/
			~S1HandoverProcedureContextManager();
			
			/******************************************
			 * allocateS1HandoverProcedureContext
			 * allocate S1HandoverProcedureContext data block
			 ******************************************/
			S1HandoverProcedureContext* allocateS1HandoverProcedureContext();
			
			/******************************************
			 * deallocateS1HandoverProcedureContext
			 * deallocate a S1HandoverProcedureContext data block
			 ******************************************/
			void deallocateS1HandoverProcedureContext(S1HandoverProcedureContext* S1HandoverProcedureContextp );
	
		private:
			cmn::memPool::MemPoolManager<S1HandoverProcedureContext> poolManager_m;
	};
};

#endif
		
		