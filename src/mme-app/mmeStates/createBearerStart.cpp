
/*
 * Copyright 2020-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * createBearerStart.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include "mmeSmDefs.h"
#include "utils/mmeStatesUtils.h"
#include "utils/mmeTimerTypes.h"

#include "mmeStates/createBearerStart.h"	
#include "mmeStates/createBearerWfPagingComplete.h"	
#include "mmeStates/createBearerWfDedActComplete.h"

using namespace mme;
using namespace SM;

/******************************************************************************
* Constructor
******************************************************************************/
CreateBearerStart::CreateBearerStart():State(create_bearer_start)
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
}

/******************************************************************************
* Destructor
******************************************************************************/
CreateBearerStart::~CreateBearerStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
CreateBearerStart* CreateBearerStart::Instance()
{
        static CreateBearerStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void CreateBearerStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.setNextState(CreateBearerWfPagingComplete::Instance());
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(GW_CP_REQ_INIT_PAGING, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_ded_bearer_activation);
                actionTable.addAction(&ActionHandlers::send_bearer_setup_and_sess_mgmt_req);
                actionTable.setNextState(CreateBearerWfDedActComplete::Instance());
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(CREATE_BEARER_START, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_create_bearer_response);
                actionTable.addAction(&ActionHandlers::abort_create_bearer_procedure);
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(ABORT_EVENT, actionTable));
        }
}
