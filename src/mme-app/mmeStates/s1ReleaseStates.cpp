

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * s1ReleaseStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/s1ReleaseStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
S1ReleaseStart::S1ReleaseStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
S1ReleaseStart::~S1ReleaseStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
S1ReleaseStart* S1ReleaseStart::Instance()
{
        static S1ReleaseStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void S1ReleaseStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_rel_ab_req_to_sgw);
                actionTable.setNextState(S1ReleaseWfReleaseAccessBearerResp::Instance());
                eventToActionsMap[S1_REL_REQ_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_s1_release);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t S1ReleaseStart::getStateId()const
{
	return s1_release_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* S1ReleaseStart::getStateName()const
{
	return "s1_release_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
S1ReleaseWfReleaseAccessBearerResp::S1ReleaseWfReleaseAccessBearerResp():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
S1ReleaseWfReleaseAccessBearerResp::~S1ReleaseWfReleaseAccessBearerResp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
S1ReleaseWfReleaseAccessBearerResp* S1ReleaseWfReleaseAccessBearerResp::Instance()
{
        static S1ReleaseWfReleaseAccessBearerResp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void S1ReleaseWfReleaseAccessBearerResp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_rel_ab_resp_from_sgw);
                actionTable.addAction(&ActionHandlers::send_s1_rel_cmd_to_ue);
                actionTable.setNextState(S1ReleaseWfUeCtxtReleaseComp::Instance());
                eventToActionsMap[REL_AB_RESP_FROM_SGW] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_attach_request);
                actionTable.addAction(&ActionHandlers::del_session_req);
                actionTable.addAction(&ActionHandlers::abort_s1_release);
                actionTable.addAction(&ActionHandlers::default_attach_req_handler);
                eventToActionsMap[ATTACH_REQ_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::del_session_req);
                actionTable.addAction(&ActionHandlers::send_s1_rel_cmd_to_ue);
                actionTable.addAction(&ActionHandlers::abort_s1_release);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t S1ReleaseWfReleaseAccessBearerResp::getStateId()const
{
	return s1_release_wf_release_access_bearer_resp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* S1ReleaseWfReleaseAccessBearerResp::getStateName()const
{
	return "s1_release_wf_release_access_bearer_resp";
}

/******************************************************************************
* Constructor
******************************************************************************/
S1ReleaseWfUeCtxtReleaseComp::S1ReleaseWfUeCtxtReleaseComp():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
S1ReleaseWfUeCtxtReleaseComp::~S1ReleaseWfUeCtxtReleaseComp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
S1ReleaseWfUeCtxtReleaseComp* S1ReleaseWfUeCtxtReleaseComp::Instance()
{
        static S1ReleaseWfUeCtxtReleaseComp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void S1ReleaseWfUeCtxtReleaseComp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::s1_release_complete);
                eventToActionsMap[UE_CTXT_REL_COMP_FROM_ENB] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::del_session_req);
                actionTable.addAction(&ActionHandlers::abort_s1_release);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t S1ReleaseWfUeCtxtReleaseComp::getStateId()const
{
	return s1_release_wf_ue_ctxt_release_comp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* S1ReleaseWfUeCtxtReleaseComp::getStateName()const
{
	return "s1_release_wf_ue_ctxt_release_comp";
}
