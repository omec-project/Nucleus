

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * x2HandoverMmStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/x2HandoverMmStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
X2HoMmStart::X2HoMmStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoMmStart::~X2HoMmStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoMmStart* X2HoMmStart::Instance()
{
        static X2HoMmStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoMmStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::init_x2_ho);
                actionTable.setNextState(X2HoMmWfSmComplete::Instance());
                eventToActionsMap[START_X2_HO] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_path_switch_fail_to_enb);
                actionTable.addAction(&ActionHandlers::abort_x2_ho_mm);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoMmStart::getStateId()const
{
	return x2_ho_mm_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoMmStart::getStateName()const
{
	return "x2_ho_mm_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
X2HoMmWfSmComplete::X2HoMmWfSmComplete():State()
{
        stateGuardTimeoutDuration_m = 24000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoMmWfSmComplete::~X2HoMmWfSmComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoMmWfSmComplete* X2HoMmWfSmComplete::Instance()
{
        static X2HoMmWfSmComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoMmWfSmComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_x2_ho_sm_cmp_ind);
                actionTable.addAction(&ActionHandlers::send_path_switch_ack_to_enb);
                actionTable.addAction(&ActionHandlers::is_tau_required);
                actionTable.setNextState(X2HoMmWfTauCheck::Instance());
                eventToActionsMap[X2_HO_SM_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_path_switch_fail_to_enb);
                actionTable.addAction(&ActionHandlers::abort_x2_ho_mm);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoMmWfSmComplete::getStateId()const
{
	return x2_ho_mm_wf_sm_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoMmWfSmComplete::getStateName()const
{
	return "x2_ho_mm_wf_sm_complete";
}

/******************************************************************************
* Constructor
******************************************************************************/
X2HoMmWfTauCheck::X2HoMmWfTauCheck():State()
{
        stateGuardTimeoutDuration_m = defaultStateGuardTimerDuration_c;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoMmWfTauCheck::~X2HoMmWfTauCheck()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoMmWfTauCheck* X2HoMmWfTauCheck::Instance()
{
        static X2HoMmWfTauCheck state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoMmWfTauCheck::initialize()
{
        {
                ActionTable actionTable;
                actionTable.setNextState(X2HoMmWfTauReq::Instance());
                eventToActionsMap[TAU_REQUIRED] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::x2_ho_mm_complete);
                eventToActionsMap[TAU_NOT_REQUIRED] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoMmWfTauCheck::getStateId()const
{
	return x2_ho_mm_wf_tau_check;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoMmWfTauCheck::getStateName()const
{
	return "x2_ho_mm_wf_tau_check";
}

/******************************************************************************
* Constructor
******************************************************************************/
X2HoMmWfTauReq::X2HoMmWfTauReq():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoMmWfTauReq::~X2HoMmWfTauReq()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoMmWfTauReq* X2HoMmWfTauReq::Instance()
{
        static X2HoMmWfTauReq state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoMmWfTauReq::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_tau_request);
                actionTable.addAction(&ActionHandlers::send_tau_response_to_ue);
                actionTable.addAction(&ActionHandlers::x2_ho_mm_complete);
                eventToActionsMap[TAU_REQUEST_FROM_UE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoMmWfTauReq::getStateId()const
{
	return x2_ho_mm_wf_tau_req;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoMmWfTauReq::getStateName()const
{
	return "x2_ho_mm_wf_tau_req";
}
