

/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * x2HandoverSmStates.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include <mmeSmDefs.h>
#include <utils/mmeStatesUtils.h>
#include <utils/mmeTimerTypes.h>

#include "mmeStates/x2HandoverSmStates.h"

using namespace mme;
using namespace SM;


/******************************************************************************
* Constructor
******************************************************************************/
X2HoSmStart::X2HoSmStart():State()
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoSmStart::~X2HoSmStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoSmStart* X2HoSmStart::Instance()
{
        static X2HoSmStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoSmStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_mb_req_to_sgw_for_x2_ho);
                actionTable.setNextState(X2HoSmWfMbResp::Instance());
                eventToActionsMap[START_X2_HO_SM] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.setNextState(X2HoSmWfHoComplete::Instance());
                eventToActionsMap[X2_HO_SM_FAILURE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_x2_ho_sm);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoSmStart::getStateId()const
{
	return x2_ho_sm_start;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoSmStart::getStateName()const
{
	return "x2_ho_sm_start";
}

/******************************************************************************
* Constructor
******************************************************************************/
X2HoSmWfMbResp::X2HoSmWfMbResp():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoSmWfMbResp::~X2HoSmWfMbResp()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoSmWfMbResp* X2HoSmWfMbResp::Instance()
{
        static X2HoSmWfMbResp state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoSmWfMbResp::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_mb_resp_for_x2_ho);
                actionTable.addAction(&ActionHandlers::send_sm_ho_complete);
                actionTable.setNextState(X2HoSmWfMbResp::Instance());
                eventToActionsMap[MB_RESP_FROM_SGW] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_x2_ho_sm);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoSmWfMbResp::getStateId()const
{
	return x2_ho_sm_wf_mb_resp;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoSmWfMbResp::getStateName()const
{
	return "x2_ho_sm_wf_mb_resp";
}

/******************************************************************************
* Constructor
******************************************************************************/
X2HoSmWfHoComplete::X2HoSmWfHoComplete():State()
{
        stateGuardTimeoutDuration_m = 12000;
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
		
}

/******************************************************************************
* Destructor
******************************************************************************/
X2HoSmWfHoComplete::~X2HoSmWfHoComplete()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
X2HoSmWfHoComplete* X2HoSmWfHoComplete::Instance()
{
        static X2HoSmWfHoComplete state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void X2HoSmWfHoComplete::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::x2_ho_sm_complete);
                eventToActionsMap[X2_HO_COMPLETE] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_x2_ho_sm);
                eventToActionsMap[ABORT_EVENT] = actionTable;
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap[STATE_GUARD_TIMEOUT] = actionTable;
        }
}

/******************************************************************************
* returns stateId
******************************************************************************/
uint16_t X2HoSmWfHoComplete::getStateId()const
{
	return x2_ho_sm_wf_ho_complete;
}

/******************************************************************************
* returns stateName
******************************************************************************/
const char* X2HoSmWfHoComplete::getStateName()const
{
	return "x2_ho_sm_wf_ho_complete";
}
