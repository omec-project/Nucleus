
/*
 * Copyright 2020-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * dedDeactWfBearerAndSessionTearup.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include "mmeSmDefs.h"
#include "utils/mmeStatesUtils.h"
#include "utils/mmeTimerTypes.h"

#include "mmeStates/dedDeactWfBearerAndSessionTearup.h"	
#include "mmeStates/dedDeactWfSessionTearup.h"	
#include "mmeStates/dedDeactWfBearerTearup.h"

using namespace mme;
using namespace SM;

/******************************************************************************
* Constructor
******************************************************************************/
DedDeactWfBearerAndSessionTearup::DedDeactWfBearerAndSessionTearup():State(ded_deact_wf_bearer_and_session_tearup, defaultStateGuardTimerDuration_c)
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactWfBearerAndSessionTearup::~DedDeactWfBearerAndSessionTearup()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactWfBearerAndSessionTearup* DedDeactWfBearerAndSessionTearup::Instance()
{
        static DedDeactWfBearerAndSessionTearup state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactWfBearerAndSessionTearup::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_erab_release_response);
                actionTable.setNextState(DedDeactWfSessionTearup::Instance());
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(ERAB_REL_RESP_FROM_ENB, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::process_deact_ded_bearer_accept);
                actionTable.setNextState(DedDeactWfBearerTearup::Instance());
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(DEACT_DED_BEARER_ACCEPT_FROM_UE, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::handle_state_guard_timeouts);
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(STATE_GUARD_TIMEOUT, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(ABORT_EVENT, actionTable));
        }
}
