
/*
 * Copyright 2020-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * dedDeactStart.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include "mmeSmDefs.h"
#include "utils/mmeStatesUtils.h"
#include "utils/mmeTimerTypes.h"

#include "mmeStates/dedDeactStart.h"	
#include "mmeStates/dedDeactWfBearerAndSessionTearup.h"

using namespace mme;
using namespace SM;

/******************************************************************************
* Constructor
******************************************************************************/
DedDeactStart::DedDeactStart():State(ded_deact_start)
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
}

/******************************************************************************
* Destructor
******************************************************************************/
DedDeactStart::~DedDeactStart()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
DedDeactStart* DedDeactStart::Instance()
{
        static DedDeactStart state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void DedDeactStart::initialize()
{
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::send_erab_rel_cmd_and_deact_eps_br_ctxt_req);
                actionTable.setNextState(DedDeactWfBearerAndSessionTearup::Instance());
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(DED_BEARER_DEACT_START, actionTable));
        }
        {
                ActionTable actionTable;
                actionTable.addAction(&ActionHandlers::abort_ded_deactivation);
                eventToActionsMap.insert(pair<uint16_t, ActionTable>(ABORT_EVENT, actionTable));
        }
}
