 /*
 * Copyright 2020-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */ 
/******************************************************************************
 * mmeS1RelProcedureCtxtManager.cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/blockPoolManager.cpp.tt>
 ******************************************************************************/

#include "memPoolManager.h"
#include "contextManager/dataBlocks.h"
#include "contextManager/mmeS1RelProcedureCtxtManager.h"

using namespace cmn::memPool;

namespace mme
{
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeS1RelProcedureCtxtManager::MmeS1RelProcedureCtxtManager(int numOfBlocks):poolManager_m(numOfBlocks)
	{
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeS1RelProcedureCtxtManager::~MmeS1RelProcedureCtxtManager()
	{
	}
	
	/******************************************************************************
	* Allocate MmeS1RelProcedureCtxt data block
	******************************************************************************/
	MmeS1RelProcedureCtxt* MmeS1RelProcedureCtxtManager::allocateMmeS1RelProcedureCtxt()
	{
		MmeS1RelProcedureCtxt* MmeS1RelProcedureCtxt_p = poolManager_m.allocate();
		return MmeS1RelProcedureCtxt_p;
	}
	
	/******************************************************************************
	* Deallocate a MmeS1RelProcedureCtxt data block
	******************************************************************************/
	void MmeS1RelProcedureCtxtManager::deallocateMmeS1RelProcedureCtxt(MmeS1RelProcedureCtxt* MmeS1RelProcedureCtxtp )
	{
		poolManager_m.free( MmeS1RelProcedureCtxtp );
	}
}