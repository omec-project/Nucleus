/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/dataBlocks.cpp.tt>
 ***************************************/
#include "contextManager/dataBlocks.h"

namespace mme
{
	/******************************************************************************
	*******************************************************************************
	*							UEContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	UEContext::UEContext():           
            enbFd_m(0),
            s1apEnbUeId_m(0),
            subscriptionStatus_m(0),
            netAccessMode_m(0),
            contextID_m(0),
            rauTauTimer_m(0),
            accessRestrictionData_m(0),
            imsi_m(),
            msisdn_m(),
            dwnLnkSeqNo_m(0),
            upLnkSeqNo_m(0),
            ueState_m(InvalidState),
            tai_m(),
            utranCgi_m(),
            msNetCapab_m(),
            ueNetCapab_m(),
            ueSecInfo_m(),
            ambr_m(),
            aiaSecInfo_m(),
            mTmsi_m(0),
            subscribedApn_m(),
            pdnAddr_m(),
            sgwCtrlPIP_m(0),MmContext_mp(NULL),SessionContext_mp(NULL)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	UEContext::~UEContext()
	{
	}	
	
	/******************************************************************************
	* sets enbFd
	******************************************************************************/
	void UEContext::setEnbFd( uint32_t enbFd_i )
	{
		enbFd_m = enbFd_i;
	}
	
	/******************************************************************************
	* returns enbFd
	******************************************************************************/	
	uint32_t UEContext::getEnbFd() const
	{
		return enbFd_m;
	}
	
	/******************************************************************************
	* sets s1apEnbUeId
	******************************************************************************/
	void UEContext::setS1apEnbUeId( uint32_t s1apEnbUeId_i )
	{
		s1apEnbUeId_m = s1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns s1apEnbUeId
	******************************************************************************/	
	uint32_t UEContext::getS1apEnbUeId() const
	{
		return s1apEnbUeId_m;
	}
	
	/******************************************************************************
	* sets subscriptionStatus
	******************************************************************************/
	void UEContext::setSubscriptionStatus( int subscriptionStatus_i )
	{
		subscriptionStatus_m = subscriptionStatus_i;
	}
	
	/******************************************************************************
	* returns subscriptionStatus
	******************************************************************************/	
	int UEContext::getSubscriptionStatus() const
	{
		return subscriptionStatus_m;
	}
	
	/******************************************************************************
	* sets netAccessMode
	******************************************************************************/
	void UEContext::setNetAccessMode( int netAccessMode_i )
	{
		netAccessMode_m = netAccessMode_i;
	}
	
	/******************************************************************************
	* returns netAccessMode
	******************************************************************************/	
	int UEContext::getNetAccessMode() const
	{
		return netAccessMode_m;
	}
	
	/******************************************************************************
	* sets contextID
	******************************************************************************/
	void UEContext::setContextID( uint32_t contextID_i )
	{
		contextID_m = contextID_i;
	}
	
	/******************************************************************************
	* returns contextID
	******************************************************************************/	
	uint32_t UEContext::getContextID() const
	{
		return contextID_m;
	}
	
	/******************************************************************************
	* sets rauTauTimer
	******************************************************************************/
	void UEContext::setRauTauTimer( uint32_t rauTauTimer_i )
	{
		rauTauTimer_m = rauTauTimer_i;
	}
	
	/******************************************************************************
	* returns rauTauTimer
	******************************************************************************/	
	uint32_t UEContext::getRauTauTimer() const
	{
		return rauTauTimer_m;
	}
	
	/******************************************************************************
	* sets accessRestrictionData
	******************************************************************************/
	void UEContext::setAccessRestrictionData( uint32_t accessRestrictionData_i )
	{
		accessRestrictionData_m = accessRestrictionData_i;
	}
	
	/******************************************************************************
	* returns accessRestrictionData
	******************************************************************************/	
	uint32_t UEContext::getAccessRestrictionData() const
	{
		return accessRestrictionData_m;
	}
	
	/******************************************************************************
	* sets imsi
	******************************************************************************/
	void UEContext::setImsi( const DigitRegister15& imsi_i )
	{
		imsi_m = imsi_i;
	}
	
	/******************************************************************************
	* returns imsi
	******************************************************************************/	
	const DigitRegister15& UEContext::getImsi() const
	{
		return imsi_m;
	}
	
	/******************************************************************************
	* sets msisdn
	******************************************************************************/
	void UEContext::setMsisdn( const DigitRegister15& msisdn_i )
	{
		msisdn_m = msisdn_i;
	}
	
	/******************************************************************************
	* returns msisdn
	******************************************************************************/	
	const DigitRegister15& UEContext::getMsisdn() const
	{
		return msisdn_m;
	}
	
	/******************************************************************************
	* sets dwnLnkSeqNo
	******************************************************************************/
	void UEContext::setDwnLnkSeqNo( uint16_t dwnLnkSeqNo_i )
	{
		dwnLnkSeqNo_m = dwnLnkSeqNo_i;
	}
	
	/******************************************************************************
	* returns dwnLnkSeqNo
	******************************************************************************/	
	uint16_t UEContext::getDwnLnkSeqNo() const
	{
		return dwnLnkSeqNo_m;
	}
	
	/******************************************************************************
	* sets upLnkSeqNo
	******************************************************************************/
	void UEContext::setUpLnkSeqNo( uint16_t upLnkSeqNo_i )
	{
		upLnkSeqNo_m = upLnkSeqNo_i;
	}
	
	/******************************************************************************
	* returns upLnkSeqNo
	******************************************************************************/	
	uint16_t UEContext::getUpLnkSeqNo() const
	{
		return upLnkSeqNo_m;
	}
	
	/******************************************************************************
	* sets ueState
	******************************************************************************/
	void UEContext::setUeState( UE_State_e ueState_i )
	{
		ueState_m = ueState_i;
	}
	
	/******************************************************************************
	* returns ueState
	******************************************************************************/	
	UE_State_e UEContext::getUeState() const
	{
		return ueState_m;
	}
	
	/******************************************************************************
	* sets tai
	******************************************************************************/
	void UEContext::setTai( const Tai& tai_i )
	{
		tai_m = tai_i;
	}
	
	/******************************************************************************
	* returns tai
	******************************************************************************/	
	const Tai& UEContext::getTai() const
	{
		return tai_m;
	}
	
	/******************************************************************************
	* sets utranCgi
	******************************************************************************/
	void UEContext::setUtranCgi( const Cgi& utranCgi_i )
	{
		utranCgi_m = utranCgi_i;
	}
	
	/******************************************************************************
	* returns utranCgi
	******************************************************************************/	
	const Cgi& UEContext::getUtranCgi() const
	{
		return utranCgi_m;
	}
	
	/******************************************************************************
	* sets msNetCapab
	******************************************************************************/
	void UEContext::setMsNetCapab( const Ms_net_capab& msNetCapab_i )
	{
		msNetCapab_m = msNetCapab_i;
	}
	
	/******************************************************************************
	* returns msNetCapab
	******************************************************************************/	
	const Ms_net_capab& UEContext::getMsNetCapab() const
	{
		return msNetCapab_m;
	}
	
	/******************************************************************************
	* sets ueNetCapab
	******************************************************************************/
	void UEContext::setUeNetCapab( const Ue_net_capab& ueNetCapab_i )
	{
		ueNetCapab_m = ueNetCapab_i;
	}
	
	/******************************************************************************
	* returns ueNetCapab
	******************************************************************************/	
	const Ue_net_capab& UEContext::getUeNetCapab() const
	{
		return ueNetCapab_m;
	}
	
	/******************************************************************************
	* sets ueSecInfo
	******************************************************************************/
	void UEContext::setUeSecInfo( const Secinfo& ueSecInfo_i )
	{
		ueSecInfo_m = ueSecInfo_i;
	}
	
	/******************************************************************************
	* returns ueSecInfo
	******************************************************************************/	
	const Secinfo& UEContext::getUeSecInfo() const
	{
		return ueSecInfo_m;
	}
	
	/******************************************************************************
	* sets ambr
	******************************************************************************/
	void UEContext::setAmbr( const Ambr& ambr_i )
	{
		ambr_m = ambr_i;
	}
	
	/******************************************************************************
	* returns ambr
	******************************************************************************/	
	const Ambr& UEContext::getAmbr() const
	{
		return ambr_m;
	}
	
	/******************************************************************************
	* sets aiaSecInfo
	******************************************************************************/
	void UEContext::setAiaSecInfo( const E_utran_sec_vector& aiaSecInfo_i )
	{
		aiaSecInfo_m = aiaSecInfo_i;
	}
	
	/******************************************************************************
	* returns aiaSecInfo
	******************************************************************************/	
	const E_utran_sec_vector& UEContext::getAiaSecInfo() const
	{
		return aiaSecInfo_m;
	}
	
	/******************************************************************************
	* sets mTmsi
	******************************************************************************/
	void UEContext::setMTmsi( uint32_t mTmsi_i )
	{
		mTmsi_m = mTmsi_i;
	}
	
	/******************************************************************************
	* returns mTmsi
	******************************************************************************/	
	uint32_t UEContext::getMTmsi() const
	{
		return mTmsi_m;
	}
	
	/******************************************************************************
	* sets subscribedApn
	******************************************************************************/
	void UEContext::setSubscribedApn( const Apn_name& subscribedApn_i )
	{
		subscribedApn_m = subscribedApn_i;
	}
	
	/******************************************************************************
	* returns subscribedApn
	******************************************************************************/	
	const Apn_name& UEContext::getSubscribedApn() const
	{
		return subscribedApn_m;
	}
	
	/******************************************************************************
	* sets pdnAddr
	******************************************************************************/
	void UEContext::setPdnAddr( const Paa& pdnAddr_i )
	{
		pdnAddr_m = pdnAddr_i;
	}
	
	/******************************************************************************
	* returns pdnAddr
	******************************************************************************/	
	const Paa& UEContext::getPdnAddr() const
	{
		return pdnAddr_m;
	}
	
	/******************************************************************************
	* sets sgwCtrlPIP
	******************************************************************************/
	void UEContext::setSgwCtrlPIP( uint64_t sgwCtrlPIP_i )
	{
		sgwCtrlPIP_m = sgwCtrlPIP_i;
	}
	
	/******************************************************************************
	* returns sgwCtrlPIP
	******************************************************************************/	
	uint64_t UEContext::getSgwCtrlPIP() const
	{
		return sgwCtrlPIP_m;
	}
	
	/******************************************************************************
	* sets MmContext
	******************************************************************************/
	void UEContext::setMmContext( MmContext* MmContextp )
	{
		MmContext_mp = MmContextp;
	}
	
	/******************************************************************************
	* returns MmContext
	******************************************************************************/
	MmContext* UEContext::getMmContext()
	{
		return MmContext_mp;
	}
	/******************************************************************************
	* sets SessionContext
	******************************************************************************/
	void UEContext::setSessionContext( SessionContext* SessionContextp )
	{
		SessionContext_mp = SessionContextp;
	}
	
	/******************************************************************************
	* returns SessionContext
	******************************************************************************/
	SessionContext* UEContext::getSessionContext()
	{
		return SessionContext_mp;
	}
	/******************************************************************************
	*******************************************************************************
	*							MmContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmContext::MmContext():           
            mmState_m(InvalidState),
            ecmState_m(ecmUnknown_c)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmContext::~MmContext()
	{
	}	
	
	/******************************************************************************
	* sets mmState
	******************************************************************************/
	void MmContext::setMmState( EmmState mmState_i )
	{
		mmState_m = mmState_i;
	}
	
	/******************************************************************************
	* returns mmState
	******************************************************************************/	
	EmmState MmContext::getMmState() const
	{
		return mmState_m;
	}
	
	/******************************************************************************
	* sets ecmState
	******************************************************************************/
	void MmContext::setEcmState( EcmState ecmState_i )
	{
		ecmState_m = ecmState_i;
	}
	
	/******************************************************************************
	* returns ecmState
	******************************************************************************/	
	EcmState MmContext::getEcmState() const
	{
		return ecmState_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							SessionContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	SessionContext::SessionContext():           
            sessionId_m(0),
            s11SgwCtrlFteid_m(),
            s5S8PgwCtrlFteid_m(),
            pdnAddr_m(),
            accessPtName_m(),
            apnConfigProfileCtxId_m(0),
            pti_m(0),BearerContext_mp(NULL)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	SessionContext::~SessionContext()
	{
	}	
	
	/******************************************************************************
	* sets sessionId
	******************************************************************************/
	void SessionContext::setSessionId( uint8_t sessionId_i )
	{
		sessionId_m = sessionId_i;
	}
	
	/******************************************************************************
	* returns sessionId
	******************************************************************************/	
	uint8_t SessionContext::getSessionId() const
	{
		return sessionId_m;
	}
	
	/******************************************************************************
	* sets s11SgwCtrlFteid
	******************************************************************************/
	void SessionContext::setS11SgwCtrlFteid( const Fteid& s11SgwCtrlFteid_i )
	{
		s11SgwCtrlFteid_m = s11SgwCtrlFteid_i;
	}
	
	/******************************************************************************
	* returns s11SgwCtrlFteid
	******************************************************************************/	
	const Fteid& SessionContext::getS11SgwCtrlFteid() const
	{
		return s11SgwCtrlFteid_m;
	}
	
	/******************************************************************************
	* sets s5S8PgwCtrlFteid
	******************************************************************************/
	void SessionContext::setS5S8PgwCtrlFteid( const Fteid& s5S8PgwCtrlFteid_i )
	{
		s5S8PgwCtrlFteid_m = s5S8PgwCtrlFteid_i;
	}
	
	/******************************************************************************
	* returns s5S8PgwCtrlFteid
	******************************************************************************/	
	const Fteid& SessionContext::getS5S8PgwCtrlFteid() const
	{
		return s5S8PgwCtrlFteid_m;
	}
	
	/******************************************************************************
	* sets pdnAddr
	******************************************************************************/
	void SessionContext::setPdnAddr( const Paa& pdnAddr_i )
	{
		pdnAddr_m = pdnAddr_i;
	}
	
	/******************************************************************************
	* returns pdnAddr
	******************************************************************************/	
	const Paa& SessionContext::getPdnAddr() const
	{
		return pdnAddr_m;
	}
	
	/******************************************************************************
	* sets accessPtName
	******************************************************************************/
	void SessionContext::setAccessPtName( const Apn_name& accessPtName_i )
	{
		accessPtName_m = accessPtName_i;
	}
	
	/******************************************************************************
	* returns accessPtName
	******************************************************************************/	
	const Apn_name& SessionContext::getAccessPtName() const
	{
		return accessPtName_m;
	}
	
	/******************************************************************************
	* sets apnConfigProfileCtxId
	******************************************************************************/
	void SessionContext::setApnConfigProfileCtxId( uint32_t apnConfigProfileCtxId_i )
	{
		apnConfigProfileCtxId_m = apnConfigProfileCtxId_i;
	}
	
	/******************************************************************************
	* returns apnConfigProfileCtxId
	******************************************************************************/	
	uint32_t SessionContext::getApnConfigProfileCtxId() const
	{
		return apnConfigProfileCtxId_m;
	}
	
	/******************************************************************************
	* sets pti
	******************************************************************************/
	void SessionContext::setPti( uint8_t pti_i )
	{
		pti_m = pti_i;
	}
	
	/******************************************************************************
	* returns pti
	******************************************************************************/	
	uint8_t SessionContext::getPti() const
	{
		return pti_m;
	}
	
	/******************************************************************************
	* sets BearerContext
	******************************************************************************/
	void SessionContext::setBearerContext( BearerContext* BearerContextp )
	{
		BearerContext_mp = BearerContextp;
	}
	
	/******************************************************************************
	* returns BearerContext
	******************************************************************************/
	BearerContext* SessionContext::getBearerContext()
	{
		return BearerContext_mp;
	}
	/******************************************************************************
	*******************************************************************************
	*							BearerContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	BearerContext::BearerContext():           
            s1uSgwUserFteid_m(),
            s5S8PgwUserFteid_m(),
            s1uEnbUserFteid_m(),
            bearerId_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	BearerContext::~BearerContext()
	{
	}	
	
	/******************************************************************************
	* sets s1uSgwUserFteid
	******************************************************************************/
	void BearerContext::setS1uSgwUserFteid( const Fteid& s1uSgwUserFteid_i )
	{
		s1uSgwUserFteid_m = s1uSgwUserFteid_i;
	}
	
	/******************************************************************************
	* returns s1uSgwUserFteid
	******************************************************************************/	
	const Fteid& BearerContext::getS1uSgwUserFteid() const
	{
		return s1uSgwUserFteid_m;
	}
	
	/******************************************************************************
	* sets s5S8PgwUserFteid
	******************************************************************************/
	void BearerContext::setS5S8PgwUserFteid( const Fteid& s5S8PgwUserFteid_i )
	{
		s5S8PgwUserFteid_m = s5S8PgwUserFteid_i;
	}
	
	/******************************************************************************
	* returns s5S8PgwUserFteid
	******************************************************************************/	
	const Fteid& BearerContext::getS5S8PgwUserFteid() const
	{
		return s5S8PgwUserFteid_m;
	}
	
	/******************************************************************************
	* sets s1uEnbUserFteid
	******************************************************************************/
	void BearerContext::setS1uEnbUserFteid( const Fteid& s1uEnbUserFteid_i )
	{
		s1uEnbUserFteid_m = s1uEnbUserFteid_i;
	}
	
	/******************************************************************************
	* returns s1uEnbUserFteid
	******************************************************************************/	
	const Fteid& BearerContext::getS1uEnbUserFteid() const
	{
		return s1uEnbUserFteid_m;
	}
	
	/******************************************************************************
	* sets bearerId
	******************************************************************************/
	void BearerContext::setBearerId( uint8_t bearerId_i )
	{
		bearerId_m = bearerId_i;
	}
	
	/******************************************************************************
	* returns bearerId
	******************************************************************************/	
	uint8_t BearerContext::getBearerId() const
	{
		return bearerId_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeProcedureCtxt::MmeProcedureCtxt():           
            ctxtType_m(invalidProcedureType_c),
            mmeErrorCause_m(noError_c),
            s1apCause_m(),
            stateGuardTimerCtxt_m(NULL),
            authRespStatus_m(0),
            auts_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeProcedureCtxt::~MmeProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets ctxtType
	******************************************************************************/
	void MmeProcedureCtxt::setCtxtType( ProcedureType ctxtType_i )
	{
		ctxtType_m = ctxtType_i;
	}
	
	/******************************************************************************
	* returns ctxtType
	******************************************************************************/	
	ProcedureType MmeProcedureCtxt::getCtxtType() const
	{
		return ctxtType_m;
	}
	
	/******************************************************************************
	* sets mmeErrorCause
	******************************************************************************/
	void MmeProcedureCtxt::setMmeErrorCause( MmeErrorCause mmeErrorCause_i )
	{
		mmeErrorCause_m = mmeErrorCause_i;
	}
	
	/******************************************************************************
	* returns mmeErrorCause
	******************************************************************************/	
	MmeErrorCause MmeProcedureCtxt::getMmeErrorCause() const
	{
		return mmeErrorCause_m;
	}
	
	/******************************************************************************
	* sets s1apCause
	******************************************************************************/
	void MmeProcedureCtxt::setS1apCause( const S1apCause& s1apCause_i )
	{
		s1apCause_m = s1apCause_i;
	}
	
	/******************************************************************************
	* returns s1apCause
	******************************************************************************/	
	const S1apCause& MmeProcedureCtxt::getS1apCause() const
	{
		return s1apCause_m;
	}
	
	/******************************************************************************
	* sets stateGuardTimerCtxt
	******************************************************************************/
	void MmeProcedureCtxt::setStateGuardTimerCtxt( MmeUeTimerContext* stateGuardTimerCtxt_i )
	{
		stateGuardTimerCtxt_m = stateGuardTimerCtxt_i;
	}
	
	/******************************************************************************
	* returns stateGuardTimerCtxt
	******************************************************************************/	
	MmeUeTimerContext* MmeProcedureCtxt::getStateGuardTimerCtxt() const
	{
		return stateGuardTimerCtxt_m;
	}
	
	/******************************************************************************
	* sets authRespStatus
	******************************************************************************/
	void MmeProcedureCtxt::setAuthRespStatus( int authRespStatus_i )
	{
		authRespStatus_m = authRespStatus_i;
	}
	
	/******************************************************************************
	* returns authRespStatus
	******************************************************************************/	
	int MmeProcedureCtxt::getAuthRespStatus() const
	{
		return authRespStatus_m;
	}
	
	/******************************************************************************
	* sets auts
	******************************************************************************/
	void MmeProcedureCtxt::setAuts( const Auts& auts_i )
	{
		auts_m = auts_i;
	}
	
	/******************************************************************************
	* returns auts
	******************************************************************************/	
	const Auts& MmeProcedureCtxt::getAuts() const
	{
		return auts_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeAttachProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeAttachProcedureCtxt::MmeAttachProcedureCtxt():           
            esmInfoTxRequired_m(false),
            attachType_m(invalidAttachType_c),
            pcoOptionsLen_m(0),
            pti_m(0),
            requestedApn_m()
	{
		memset(pcoOptions_m,0,sizeof(pcoOptions_m));
	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeAttachProcedureCtxt::~MmeAttachProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets esmInfoTxRequired
	******************************************************************************/
	void MmeAttachProcedureCtxt::setEsmInfoTxRequired( bool esmInfoTxRequired_i )
	{
		esmInfoTxRequired_m = esmInfoTxRequired_i;
	}
	
	/******************************************************************************
	* returns esmInfoTxRequired
	******************************************************************************/	
	bool MmeAttachProcedureCtxt::getEsmInfoTxRequired() const
	{
		return esmInfoTxRequired_m;
	}
	
	/******************************************************************************
	* sets attachType
	******************************************************************************/
	void MmeAttachProcedureCtxt::setAttachType( AttachType attachType_i )
	{
		attachType_m = attachType_i;
	}
	
	/******************************************************************************
	* returns attachType
	******************************************************************************/	
	AttachType MmeAttachProcedureCtxt::getAttachType() const
	{
		return attachType_m;
	}
	
	/******************************************************************************
	* sets pcoOptions
	******************************************************************************/
	void MmeAttachProcedureCtxt::setPcoOptions( const uint8_t* pcoOptions_i,uint16_t len )
	{
		pcoOptionsLen_m=len;
		memcpy(pcoOptions_m, pcoOptions_i, (pcoOptionsLen_m * sizeof(uint8_t)));
	}
	
	/******************************************************************************
	* returns pcoOptions
	******************************************************************************/	
	const uint8_t* MmeAttachProcedureCtxt::getPcoOptions() const
	{
		return pcoOptions_m;
	}
	/******************************************************************************
	* returns pcoOptionsLen
	******************************************************************************/	
	uint16_t MmeAttachProcedureCtxt::getPcoOptionsLen() const
	{
		return pcoOptionsLen_m;
	}
	
	/******************************************************************************
	* sets pti
	******************************************************************************/
	void MmeAttachProcedureCtxt::setPti( uint8_t pti_i )
	{
		pti_m = pti_i;
	}
	
	/******************************************************************************
	* returns pti
	******************************************************************************/	
	uint8_t MmeAttachProcedureCtxt::getPti() const
	{
		return pti_m;
	}
	
	/******************************************************************************
	* sets requestedApn
	******************************************************************************/
	void MmeAttachProcedureCtxt::setRequestedApn( const Apn_name& requestedApn_i )
	{
		requestedApn_m = requestedApn_i;
	}
	
	/******************************************************************************
	* returns requestedApn
	******************************************************************************/	
	const Apn_name& MmeAttachProcedureCtxt::getRequestedApn() const
	{
		return requestedApn_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeDetachProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeDetachProcedureCtxt::MmeDetachProcedureCtxt():           
            detachType_m(invalidDetachType_c),
            cancellationType_m(INVALID_TYPE),
            nasDetachType_m(0),
            detachCause_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeDetachProcedureCtxt::~MmeDetachProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets detachType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setDetachType( DetachType detachType_i )
	{
		detachType_m = detachType_i;
	}
	
	/******************************************************************************
	* returns detachType
	******************************************************************************/	
	DetachType MmeDetachProcedureCtxt::getDetachType() const
	{
		return detachType_m;
	}
	
	/******************************************************************************
	* sets cancellationType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setCancellationType( CancellationType cancellationType_i )
	{
		cancellationType_m = cancellationType_i;
	}
	
	/******************************************************************************
	* returns cancellationType
	******************************************************************************/	
	CancellationType MmeDetachProcedureCtxt::getCancellationType() const
	{
		return cancellationType_m;
	}
	
	/******************************************************************************
	* sets nasDetachType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setNasDetachType( uint32_t nasDetachType_i )
	{
		nasDetachType_m = nasDetachType_i;
	}
	
	/******************************************************************************
	* returns nasDetachType
	******************************************************************************/	
	uint32_t MmeDetachProcedureCtxt::getNasDetachType() const
	{
		return nasDetachType_m;
	}
	
	/******************************************************************************
	* sets detachCause
	******************************************************************************/
	void MmeDetachProcedureCtxt::setDetachCause( uint32_t detachCause_i )
	{
		detachCause_m = detachCause_i;
	}
	
	/******************************************************************************
	* returns detachCause
	******************************************************************************/	
	uint32_t MmeDetachProcedureCtxt::getDetachCause() const
	{
		return detachCause_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeS1RelProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeS1RelProcedureCtxt::MmeS1RelProcedureCtxt():           
            s1ReleaseTrigger_m(noTrigger_c)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeS1RelProcedureCtxt::~MmeS1RelProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets s1ReleaseTrigger
	******************************************************************************/
	void MmeS1RelProcedureCtxt::setS1ReleaseTrigger( S1ReleaseTrigger s1ReleaseTrigger_i )
	{
		s1ReleaseTrigger_m = s1ReleaseTrigger_i;
	}
	
	/******************************************************************************
	* returns s1ReleaseTrigger
	******************************************************************************/	
	S1ReleaseTrigger MmeS1RelProcedureCtxt::getS1ReleaseTrigger() const
	{
		return s1ReleaseTrigger_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeSvcReqProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeSvcReqProcedureCtxt::MmeSvcReqProcedureCtxt():           
            ddnSeqNo_m(0),
            pagingTrigger_m(none_c),
            epsBearerId_m(0),
            arp_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeSvcReqProcedureCtxt::~MmeSvcReqProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets ddnSeqNo
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setDdnSeqNo( uint32_t ddnSeqNo_i )
	{
		ddnSeqNo_m = ddnSeqNo_i;
	}
	
	/******************************************************************************
	* returns ddnSeqNo
	******************************************************************************/	
	uint32_t MmeSvcReqProcedureCtxt::getDdnSeqNo() const
	{
		return ddnSeqNo_m;
	}
	
	/******************************************************************************
	* sets pagingTrigger
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setPagingTrigger( PagingTrigger pagingTrigger_i )
	{
		pagingTrigger_m = pagingTrigger_i;
	}
	
	/******************************************************************************
	* returns pagingTrigger
	******************************************************************************/	
	PagingTrigger MmeSvcReqProcedureCtxt::getPagingTrigger() const
	{
		return pagingTrigger_m;
	}
	
	/******************************************************************************
	* sets epsBearerId
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setEpsBearerId( uint8_t epsBearerId_i )
	{
		epsBearerId_m = epsBearerId_i;
	}
	
	/******************************************************************************
	* returns epsBearerId
	******************************************************************************/	
	uint8_t MmeSvcReqProcedureCtxt::getEpsBearerId() const
	{
		return epsBearerId_m;
	}
	
	/******************************************************************************
	* sets arp
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setArp( const Arp& arp_i )
	{
		arp_m = arp_i;
	}
	
	/******************************************************************************
	* returns arp
	******************************************************************************/	
	const Arp& MmeSvcReqProcedureCtxt::getArp() const
	{
		return arp_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeTauProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeTauProcedureCtxt::MmeTauProcedureCtxt():           
            s1apEnbUeId_m(0),
            tai_m(),
            eUtranCgi_m(),
            enbFd_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeTauProcedureCtxt::~MmeTauProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets s1apEnbUeId
	******************************************************************************/
	void MmeTauProcedureCtxt::setS1apEnbUeId( uint32_t s1apEnbUeId_i )
	{
		s1apEnbUeId_m = s1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns s1apEnbUeId
	******************************************************************************/	
	uint32_t MmeTauProcedureCtxt::getS1apEnbUeId() const
	{
		return s1apEnbUeId_m;
	}
	
	/******************************************************************************
	* sets tai
	******************************************************************************/
	void MmeTauProcedureCtxt::setTai( const Tai& tai_i )
	{
		tai_m = tai_i;
	}
	
	/******************************************************************************
	* returns tai
	******************************************************************************/	
	const Tai& MmeTauProcedureCtxt::getTai() const
	{
		return tai_m;
	}
	
	/******************************************************************************
	* sets eUtranCgi
	******************************************************************************/
	void MmeTauProcedureCtxt::setEUtranCgi( const Cgi& eUtranCgi_i )
	{
		eUtranCgi_m = eUtranCgi_i;
	}
	
	/******************************************************************************
	* returns eUtranCgi
	******************************************************************************/	
	const Cgi& MmeTauProcedureCtxt::getEUtranCgi() const
	{
		return eUtranCgi_m;
	}
	
	/******************************************************************************
	* sets enbFd
	******************************************************************************/
	void MmeTauProcedureCtxt::setEnbFd( uint32_t enbFd_i )
	{
		enbFd_m = enbFd_i;
	}
	
	/******************************************************************************
	* returns enbFd
	******************************************************************************/	
	uint32_t MmeTauProcedureCtxt::getEnbFd() const
	{
		return enbFd_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							S1HandoverProcedureContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	S1HandoverProcedureContext::S1HandoverProcedureContext():           
            hoType_m(invalid_c),
            targetEnbContextId_m(0),
            targetS1apEnbUeId_m(0),
            targetTai_m(),
            targetCgi_m(),
            srcToTargetTransContainer_m(),
            targetToSrcTransContainer_m(),
            erabAdmittedItem_m(),
            s1HoCause_m(),
            srcEnbContextId_m(0),
            srcS1apEnbUeId_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	S1HandoverProcedureContext::~S1HandoverProcedureContext()
	{
	}	
	
	/******************************************************************************
	* sets hoType
	******************************************************************************/
	void S1HandoverProcedureContext::setHoType( HoType hoType_i )
	{
		hoType_m = hoType_i;
	}
	
	/******************************************************************************
	* returns hoType
	******************************************************************************/	
	HoType S1HandoverProcedureContext::getHoType() const
	{
		return hoType_m;
	}
	
	/******************************************************************************
	* sets targetEnbContextId
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetEnbContextId( uint32_t targetEnbContextId_i )
	{
		targetEnbContextId_m = targetEnbContextId_i;
	}
	
	/******************************************************************************
	* returns targetEnbContextId
	******************************************************************************/	
	uint32_t S1HandoverProcedureContext::getTargetEnbContextId() const
	{
		return targetEnbContextId_m;
	}
	
	/******************************************************************************
	* sets targetS1apEnbUeId
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetS1apEnbUeId( uint32_t targetS1apEnbUeId_i )
	{
		targetS1apEnbUeId_m = targetS1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns targetS1apEnbUeId
	******************************************************************************/	
	uint32_t S1HandoverProcedureContext::getTargetS1apEnbUeId() const
	{
		return targetS1apEnbUeId_m;
	}
	
	/******************************************************************************
	* sets targetTai
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetTai( const Tai& targetTai_i )
	{
		targetTai_m = targetTai_i;
	}
	
	/******************************************************************************
	* returns targetTai
	******************************************************************************/	
	const Tai& S1HandoverProcedureContext::getTargetTai() const
	{
		return targetTai_m;
	}
	
	/******************************************************************************
	* sets targetCgi
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetCgi( const Cgi& targetCgi_i )
	{
		targetCgi_m = targetCgi_i;
	}
	
	/******************************************************************************
	* returns targetCgi
	******************************************************************************/	
	const Cgi& S1HandoverProcedureContext::getTargetCgi() const
	{
		return targetCgi_m;
	}
	
	/******************************************************************************
	* sets srcToTargetTransContainer
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcToTargetTransContainer( const src_target_transparent_container& srcToTargetTransContainer_i )
	{
		srcToTargetTransContainer_m = srcToTargetTransContainer_i;
	}
	
	/******************************************************************************
	* returns srcToTargetTransContainer
	******************************************************************************/	
	const src_target_transparent_container& S1HandoverProcedureContext::getSrcToTargetTransContainer() const
	{
		return srcToTargetTransContainer_m;
	}
	
	/******************************************************************************
	* sets targetToSrcTransContainer
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetToSrcTransContainer( const src_target_transparent_container& targetToSrcTransContainer_i )
	{
		targetToSrcTransContainer_m = targetToSrcTransContainer_i;
	}
	
	/******************************************************************************
	* returns targetToSrcTransContainer
	******************************************************************************/	
	const src_target_transparent_container& S1HandoverProcedureContext::getTargetToSrcTransContainer() const
	{
		return targetToSrcTransContainer_m;
	}
	
	/******************************************************************************
	* sets erabAdmittedItem
	******************************************************************************/
	void S1HandoverProcedureContext::setErabAdmittedItem( const ERAB_admitted& erabAdmittedItem_i )
	{
		erabAdmittedItem_m = erabAdmittedItem_i;
	}
	
	/******************************************************************************
	* returns erabAdmittedItem
	******************************************************************************/	
	const ERAB_admitted& S1HandoverProcedureContext::getErabAdmittedItem() const
	{
		return erabAdmittedItem_m;
	}
	
	/******************************************************************************
	* sets s1HoCause
	******************************************************************************/
	void S1HandoverProcedureContext::setS1HoCause( const S1apCause& s1HoCause_i )
	{
		s1HoCause_m = s1HoCause_i;
	}
	
	/******************************************************************************
	* returns s1HoCause
	******************************************************************************/	
	const S1apCause& S1HandoverProcedureContext::getS1HoCause() const
	{
		return s1HoCause_m;
	}
	
	/******************************************************************************
	* sets srcEnbContextId
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcEnbContextId( uint32_t srcEnbContextId_i )
	{
		srcEnbContextId_m = srcEnbContextId_i;
	}
	
	/******************************************************************************
	* returns srcEnbContextId
	******************************************************************************/	
	uint32_t S1HandoverProcedureContext::getSrcEnbContextId() const
	{
		return srcEnbContextId_m;
	}
	
	/******************************************************************************
	* sets srcS1apEnbUeId
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcS1apEnbUeId( uint32_t srcS1apEnbUeId_i )
	{
		srcS1apEnbUeId_m = srcS1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns srcS1apEnbUeId
	******************************************************************************/	
	uint32_t S1HandoverProcedureContext::getSrcS1apEnbUeId() const
	{
		return srcS1apEnbUeId_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeErabModIndProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeErabModIndProcedureCtxt::MmeErabModIndProcedureCtxt():           
            erabToBeModifiedListLen_m(0),
            erabModifiedListLen_m(0)
	{
		memset(erabToBeModifiedList_m,0,sizeof(erabToBeModifiedList_m));

		memset(erabModifiedList_m,0,sizeof(erabModifiedList_m));
	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeErabModIndProcedureCtxt::~MmeErabModIndProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets erabToBeModifiedList
	******************************************************************************/
	void MmeErabModIndProcedureCtxt::setErabToBeModifiedList( const erab_to_be_modified_item* erabToBeModifiedList_i,uint16_t len )
	{
		erabToBeModifiedListLen_m=len;
		memcpy(erabToBeModifiedList_m, erabToBeModifiedList_i, (erabToBeModifiedListLen_m * sizeof(erab_to_be_modified_item)));
	}
	
	/******************************************************************************
	* returns erabToBeModifiedList
	******************************************************************************/	
	const erab_to_be_modified_item* MmeErabModIndProcedureCtxt::getErabToBeModifiedList() const
	{
		return erabToBeModifiedList_m;
	}
	/******************************************************************************
	* returns erabToBeModifiedListLen
	******************************************************************************/	
	uint16_t MmeErabModIndProcedureCtxt::getErabToBeModifiedListLen() const
	{
		return erabToBeModifiedListLen_m;
	}
	
	/******************************************************************************
	* sets erabModifiedList
	******************************************************************************/
	void MmeErabModIndProcedureCtxt::setErabModifiedList( const uint8_t* erabModifiedList_i,uint16_t len )
	{
		erabModifiedListLen_m=len;
		memcpy(erabModifiedList_m, erabModifiedList_i, (erabModifiedListLen_m * sizeof(uint8_t)));
	}
	
	/******************************************************************************
	* returns erabModifiedList
	******************************************************************************/	
	const uint8_t* MmeErabModIndProcedureCtxt::getErabModifiedList() const
	{
		return erabModifiedList_m;
	}
	/******************************************************************************
	* returns erabModifiedListLen
	******************************************************************************/	
	uint16_t MmeErabModIndProcedureCtxt::getErabModifiedListLen() const
	{
		return erabModifiedListLen_m;
	}
	
} // mme
