/*
 * Copyright 2021-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/dataBlocks.cpp.tt>
 ***************************************/
#include "contextManager/dataBlocks.h"

namespace mme
{
	/******************************************************************************
	*******************************************************************************
	*							UEContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	UEContext::UEContext():           
            enbFd_m(0),
            s1apEnbUeId_m(0),
            subscriptionStatus_m(0),
            netAccessMode_m(0),
            contextID_m(0),
            rauTauTimer_m(0),
            accessRestrictionData_m(0),
            imsi_m(),
            msisdn_m(),
            ueState_m(InvalidState),
            tai_m(),
            utranCgi_m(),
            msNetCapab_m(),
            ueNetCapab_m(),
            ueSecInfo_m(),
            ambr_m(),
            aiaSecInfo_m(),
            mTmsi_m(0),
            subscribedApn_m(),
            pdnAddr_m(),
            ueAddSecCapab_m(),
            ueAddSecCapabPres_m(false),
            hssFeatList2_m(),
            dcnrCapable_m(false),
            bearerIdBitMap_m(0) ,MmContext_mp(NULL),SessionContext_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	UEContext::~UEContext()
	{
	}	
	
	/******************************************************************************
	* sets enbFd
	******************************************************************************/
	void UEContext::setEnbFd( uint32_t enbFd_i )
	{
		enbFd_m = enbFd_i;
	}
	
	/******************************************************************************
	* returns enbFd
	******************************************************************************/	
        uint32_t UEContext::getEnbFd() const
        {
                return enbFd_m;
        }

	
	/******************************************************************************
	* sets s1apEnbUeId
	******************************************************************************/
	void UEContext::setS1apEnbUeId( uint32_t s1apEnbUeId_i )
	{
		s1apEnbUeId_m = s1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns s1apEnbUeId
	******************************************************************************/	
        uint32_t UEContext::getS1apEnbUeId() const
        {
                return s1apEnbUeId_m;
        }

	
	/******************************************************************************
	* sets subscriptionStatus
	******************************************************************************/
	void UEContext::setSubscriptionStatus( int subscriptionStatus_i )
	{
		subscriptionStatus_m = subscriptionStatus_i;
	}
	
	/******************************************************************************
	* returns subscriptionStatus
	******************************************************************************/	
        int UEContext::getSubscriptionStatus() const
        {
                return subscriptionStatus_m;
        }

	
	/******************************************************************************
	* sets netAccessMode
	******************************************************************************/
	void UEContext::setNetAccessMode( int netAccessMode_i )
	{
		netAccessMode_m = netAccessMode_i;
	}
	
	/******************************************************************************
	* returns netAccessMode
	******************************************************************************/	
        int UEContext::getNetAccessMode() const
        {
                return netAccessMode_m;
        }

	
	/******************************************************************************
	* sets contextID
	******************************************************************************/
	void UEContext::setContextID( uint32_t contextID_i )
	{
		contextID_m = contextID_i;
	}
	
	/******************************************************************************
	* returns contextID
	******************************************************************************/	
        uint32_t UEContext::getContextID() const
        {
                return contextID_m;
        }

	
	/******************************************************************************
	* sets rauTauTimer
	******************************************************************************/
	void UEContext::setRauTauTimer( uint32_t rauTauTimer_i )
	{
		rauTauTimer_m = rauTauTimer_i;
	}
	
	/******************************************************************************
	* returns rauTauTimer
	******************************************************************************/	
        uint32_t UEContext::getRauTauTimer() const
        {
                return rauTauTimer_m;
        }

	
	/******************************************************************************
	* sets accessRestrictionData
	******************************************************************************/
	void UEContext::setAccessRestrictionData( uint32_t accessRestrictionData_i )
	{
		accessRestrictionData_m = accessRestrictionData_i;
	}
	
	/******************************************************************************
	* returns accessRestrictionData
	******************************************************************************/	
        uint32_t UEContext::getAccessRestrictionData() const
        {
                return accessRestrictionData_m;
        }

	
	/******************************************************************************
	* sets imsi
	******************************************************************************/
	void UEContext::setImsi( const DigitRegister15& imsi_i )
	{
		imsi_m = imsi_i;
	}
	
	/******************************************************************************
	* returns imsi
	******************************************************************************/	
        const DigitRegister15& UEContext::getImsi() const
        {
                return imsi_m;
        }

	
	/******************************************************************************
	* sets msisdn
	******************************************************************************/
	void UEContext::setMsisdn( const DigitRegister15& msisdn_i )
	{
		msisdn_m = msisdn_i;
	}
	
	/******************************************************************************
	* returns msisdn
	******************************************************************************/	
        const DigitRegister15& UEContext::getMsisdn() const
        {
                return msisdn_m;
        }

	
	/******************************************************************************
	* sets ueState
	******************************************************************************/
	void UEContext::setUeState( UE_State_e ueState_i )
	{
		ueState_m = ueState_i;
	}
	
	/******************************************************************************
	* returns ueState
	******************************************************************************/	
        UE_State_e UEContext::getUeState() const
        {
                return ueState_m;
        }

	
	/******************************************************************************
	* sets tai
	******************************************************************************/
	void UEContext::setTai( const Tai& tai_i )
	{
		tai_m = tai_i;
	}
	
	/******************************************************************************
	* returns tai
	******************************************************************************/	
        const Tai& UEContext::getTai() const
        {
                return tai_m;
        }

	
	/******************************************************************************
	* sets utranCgi
	******************************************************************************/
	void UEContext::setUtranCgi( const Cgi& utranCgi_i )
	{
		utranCgi_m = utranCgi_i;
	}
	
	/******************************************************************************
	* returns utranCgi
	******************************************************************************/	
        const Cgi& UEContext::getUtranCgi() const
        {
                return utranCgi_m;
        }

	
	/******************************************************************************
	* sets msNetCapab
	******************************************************************************/
	void UEContext::setMsNetCapab( const Ms_net_capab& msNetCapab_i )
	{
		msNetCapab_m = msNetCapab_i;
	}
	
	/******************************************************************************
	* returns msNetCapab
	******************************************************************************/	
        const Ms_net_capab& UEContext::getMsNetCapab() const
        {
                return msNetCapab_m;
        }

	
	/******************************************************************************
	* sets ueNetCapab
	******************************************************************************/
	void UEContext::setUeNetCapab( const Ue_net_capab& ueNetCapab_i )
	{
		ueNetCapab_m = ueNetCapab_i;
	}
	
	/******************************************************************************
	* returns ueNetCapab
	******************************************************************************/	
        const Ue_net_capab& UEContext::getUeNetCapab() const
        {
                return ueNetCapab_m;
        }

	
	/******************************************************************************
	* sets ueSecInfo
	******************************************************************************/
	void UEContext::setUeSecInfo( Secinfo& ueSecInfo_i )
	{
		ueSecInfo_m = ueSecInfo_i;
	}
	
	/******************************************************************************
	* returns ueSecInfo
	******************************************************************************/	
        Secinfo& UEContext::getUeSecInfo()
        {
                return ueSecInfo_m;
        }   

	
	/******************************************************************************
	* sets ambr
	******************************************************************************/
	void UEContext::setAmbr( const Ambr& ambr_i )
	{
		ambr_m = ambr_i;
	}
	
	/******************************************************************************
	* returns ambr
	******************************************************************************/	
        const Ambr& UEContext::getAmbr() const
        {
                return ambr_m;
        }

	
	/******************************************************************************
	* sets aiaSecInfo
	******************************************************************************/
	void UEContext::setAiaSecInfo( const E_utran_sec_vector& aiaSecInfo_i )
	{
		aiaSecInfo_m = aiaSecInfo_i;
	}
	
	/******************************************************************************
	* returns aiaSecInfo
	******************************************************************************/	
        const E_utran_sec_vector& UEContext::getAiaSecInfo() const
        {
                return aiaSecInfo_m;
        }

	
	/******************************************************************************
	* sets mTmsi
	******************************************************************************/
	void UEContext::setMTmsi( uint32_t mTmsi_i )
	{
		mTmsi_m = mTmsi_i;
	}
	
	/******************************************************************************
	* returns mTmsi
	******************************************************************************/	
        uint32_t UEContext::getMTmsi() const
        {
                return mTmsi_m;
        }

	
	/******************************************************************************
	* sets subscribedApn
	******************************************************************************/
	void UEContext::setSubscribedApn( const Apn_name& subscribedApn_i )
	{
		subscribedApn_m = subscribedApn_i;
	}
	
	/******************************************************************************
	* returns subscribedApn
	******************************************************************************/	
        const Apn_name& UEContext::getSubscribedApn() const
        {
                return subscribedApn_m;
        }

	
	/******************************************************************************
	* sets pdnAddr
	******************************************************************************/
	void UEContext::setPdnAddr( const Paa& pdnAddr_i )
	{
		pdnAddr_m = pdnAddr_i;
	}
	
	/******************************************************************************
	* returns pdnAddr
	******************************************************************************/	
        const Paa& UEContext::getPdnAddr() const
        {
                return pdnAddr_m;
        }

	
	/******************************************************************************
	* sets ueAddSecCapab
	******************************************************************************/
	void UEContext::setUeAddSecCapab( const ue_add_sec_capabilities& ueAddSecCapab_i )
	{
		ueAddSecCapab_m = ueAddSecCapab_i;
	}
	
	/******************************************************************************
	* returns ueAddSecCapab
	******************************************************************************/	
        const ue_add_sec_capabilities& UEContext::getUeAddSecCapab() const
        {
                return ueAddSecCapab_m;
        }

	
	/******************************************************************************
	* sets ueAddSecCapabPres
	******************************************************************************/
	void UEContext::setUeAddSecCapabPres( bool ueAddSecCapabPres_i )
	{
		ueAddSecCapabPres_m = ueAddSecCapabPres_i;
	}
	
	/******************************************************************************
	* returns ueAddSecCapabPres
	******************************************************************************/	
        bool UEContext::getUeAddSecCapabPres() const
        {
                return ueAddSecCapabPres_m;
        }

	
	/******************************************************************************
	* sets hssFeatList2
	******************************************************************************/
	void UEContext::setHssFeatList2( const supported_features& hssFeatList2_i )
	{
		hssFeatList2_m = hssFeatList2_i;
	}
	
	/******************************************************************************
	* returns hssFeatList2
	******************************************************************************/	
        const supported_features& UEContext::getHssFeatList2() const
        {
                return hssFeatList2_m;
        }

	
	/******************************************************************************
	* sets dcnrCapable
	******************************************************************************/
	void UEContext::setDcnrCapable( bool dcnrCapable_i )
	{
		dcnrCapable_m = dcnrCapable_i;
	}
	
	/******************************************************************************
	* returns dcnrCapable
	******************************************************************************/	
        bool UEContext::getDcnrCapable() const
        {
                return dcnrCapable_m;
        }

	
	/******************************************************************************
	* sets bearerIdBitMap
	******************************************************************************/
	void UEContext::setBearerIdBitMap( uint16_t bearerIdBitMap_i )
	{
		bearerIdBitMap_m = bearerIdBitMap_i;
	}
	
	/******************************************************************************
	* returns bearerIdBitMap
	******************************************************************************/	
        uint16_t UEContext::getBearerIdBitMap() const
        {
                return bearerIdBitMap_m;
        }

	
	/******************************************************************************
	* sets MmContext
	******************************************************************************/
	void UEContext::setMmContext( MmContext* MmContextp )
	{
		MmContext_mp = MmContextp;
	}
	
	/******************************************************************************
	* returns MmContext
	******************************************************************************/
	MmContext* UEContext::getMmContext()
	{
		return MmContext_mp;
	}

	/******************************************************************************
	* add SessionContext
	******************************************************************************/
	bool UEContext::addSessionContext(SessionContext* SessionContext_i)
	{
	        if( SessionContext_m.size() <= 15 )
    		        SessionContext_m.push_back(SessionContext_i);
    		else
    		        return false;
    		return true;
	}
	
	/******************************************************************************
	* remove SessionContext
	******************************************************************************/
	void UEContext::removeSessionContext(SessionContext* SessionContext_i)
	{
    	    	SessionContext_m.remove(SessionContext_i);
	}
		
	/******************************************************************************
	* returns SessionContextList
	******************************************************************************/
	std::list<SessionContext*>& UEContext::getSessionContextContainer()
	{
		return SessionContext_m;
	}
	
	/******************************************************************************
	* find SessionContext ByAccessPtName
	******************************************************************************/
	SessionContext* UEContext::findSessionContextByAccessPtName( const Apn_name& accessPtName_i)
	{
		for( auto &it : SessionContext_m)
    		{
        		if(it->getAccessPtName() == accessPtName_i)
        		{
            			return it;
        		}
    		}
    		return NULL;
	}
	
	/******************************************************************************
	* find SessionContext ByLinkedBearerId
	******************************************************************************/
	SessionContext* UEContext::findSessionContextByLinkedBearerId( uint8_t linkedBearerId_i)
	{
		for( auto &it : SessionContext_m)
    		{
        		if(it->getLinkedBearerId() == linkedBearerId_i)
        		{
            			return it;
        		}
    		}
    		return NULL;
	}
	
	/******************************************************************************
	* find SessionContext ByApnConfigProfileCtxId
	******************************************************************************/
	SessionContext* UEContext::findSessionContextByApnConfigProfileCtxId( uint32_t apnConfigProfileCtxId_i)
	{
		for( auto &it : SessionContext_m)
    		{
        		if(it->getApnConfigProfileCtxId() == apnConfigProfileCtxId_i)
        		{
            			return it;
        		}
    		}
    		return NULL;
	}

	/******************************************************************************
	*******************************************************************************
	*							MmContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmContext::MmContext():           
            mmState_m(InvalidState),
            ecmState_m(ecmUnknown_c)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmContext::~MmContext()
	{
	}	
	
	/******************************************************************************
	* sets mmState
	******************************************************************************/
	void MmContext::setMmState( EmmState mmState_i )
	{
		mmState_m = mmState_i;
	}
	
	/******************************************************************************
	* returns mmState
	******************************************************************************/	
        EmmState MmContext::getMmState() const
        {
                return mmState_m;
        }

	
	/******************************************************************************
	* sets ecmState
	******************************************************************************/
	void MmContext::setEcmState( EcmState ecmState_i )
	{
		ecmState_m = ecmState_i;
	}
	
	/******************************************************************************
	* returns ecmState
	******************************************************************************/	
        EcmState MmContext::getEcmState() const
        {
                return ecmState_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							SessionContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	SessionContext::SessionContext():           
            sessionId_m(0),
            linkedBearerId_m(0),
            s11SgwCtrlFteid_m(),
            s5S8PgwCtrlFteid_m(),
            pdnAddr_m(),
            accessPtName_m(),
            apnConfigProfileCtxId_m(0),
            pti_m(0),
            apnAmbr_m(),BearerContext_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	SessionContext::~SessionContext()
	{
	}	
	
	/******************************************************************************
	* sets sessionId
	******************************************************************************/
	void SessionContext::setSessionId( uint8_t sessionId_i )
	{
		sessionId_m = sessionId_i;
	}
	
	/******************************************************************************
	* returns sessionId
	******************************************************************************/	
        uint8_t SessionContext::getSessionId() const
        {
                return sessionId_m;
        }

	
	/******************************************************************************
	* sets linkedBearerId
	******************************************************************************/
	void SessionContext::setLinkedBearerId( uint8_t linkedBearerId_i )
	{
		linkedBearerId_m = linkedBearerId_i;
	}
	
	/******************************************************************************
	* returns linkedBearerId
	******************************************************************************/	
        uint8_t SessionContext::getLinkedBearerId() const
        {
                return linkedBearerId_m;
        }

	
	/******************************************************************************
	* sets s11SgwCtrlFteid
	******************************************************************************/
	void SessionContext::setS11SgwCtrlFteid( const Fteid& s11SgwCtrlFteid_i )
	{
		s11SgwCtrlFteid_m = s11SgwCtrlFteid_i;
	}
	
	/******************************************************************************
	* returns s11SgwCtrlFteid
	******************************************************************************/	
        const Fteid& SessionContext::getS11SgwCtrlFteid() const
        {
                return s11SgwCtrlFteid_m;
        }

	
	/******************************************************************************
	* sets s5S8PgwCtrlFteid
	******************************************************************************/
	void SessionContext::setS5S8PgwCtrlFteid( const Fteid& s5S8PgwCtrlFteid_i )
	{
		s5S8PgwCtrlFteid_m = s5S8PgwCtrlFteid_i;
	}
	
	/******************************************************************************
	* returns s5S8PgwCtrlFteid
	******************************************************************************/	
        const Fteid& SessionContext::getS5S8PgwCtrlFteid() const
        {
                return s5S8PgwCtrlFteid_m;
        }

	
	/******************************************************************************
	* sets pdnAddr
	******************************************************************************/
	void SessionContext::setPdnAddr( const Paa& pdnAddr_i )
	{
		pdnAddr_m = pdnAddr_i;
	}
	
	/******************************************************************************
	* returns pdnAddr
	******************************************************************************/	
        const Paa& SessionContext::getPdnAddr() const
        {
                return pdnAddr_m;
        }

	
	/******************************************************************************
	* sets accessPtName
	******************************************************************************/
	void SessionContext::setAccessPtName( const Apn_name& accessPtName_i )
	{
		accessPtName_m = accessPtName_i;
	}
	
	/******************************************************************************
	* returns accessPtName
	******************************************************************************/	
        const Apn_name& SessionContext::getAccessPtName() const
        {
                return accessPtName_m;
        }

	
	/******************************************************************************
	* sets apnConfigProfileCtxId
	******************************************************************************/
	void SessionContext::setApnConfigProfileCtxId( uint32_t apnConfigProfileCtxId_i )
	{
		apnConfigProfileCtxId_m = apnConfigProfileCtxId_i;
	}
	
	/******************************************************************************
	* returns apnConfigProfileCtxId
	******************************************************************************/	
        uint32_t SessionContext::getApnConfigProfileCtxId() const
        {
                return apnConfigProfileCtxId_m;
        }

	
	/******************************************************************************
	* sets pti
	******************************************************************************/
	void SessionContext::setPti( uint8_t pti_i )
	{
		pti_m = pti_i;
	}
	
	/******************************************************************************
	* returns pti
	******************************************************************************/	
        uint8_t SessionContext::getPti() const
        {
                return pti_m;
        }

	
	/******************************************************************************
	* sets apnAmbr
	******************************************************************************/
	void SessionContext::setApnAmbr( const Ambr& apnAmbr_i )
	{
		apnAmbr_m = apnAmbr_i;
	}
	
	/******************************************************************************
	* returns apnAmbr
	******************************************************************************/	
        const Ambr& SessionContext::getApnAmbr() const
        {
                return apnAmbr_m;
        }

	
	/******************************************************************************
	* add BearerContext
	******************************************************************************/
	bool SessionContext::addBearerContext(BearerContext* BearerContext_i)
	{
	        if( BearerContext_m.size() <= 15 )
    		        BearerContext_m.push_back(BearerContext_i);
    		else
    		        return false;
    		return true;
	}
	
	/******************************************************************************
	* remove BearerContext
	******************************************************************************/
	void SessionContext::removeBearerContext(BearerContext* BearerContext_i)
	{
    	    	BearerContext_m.remove(BearerContext_i);
	}
		
	/******************************************************************************
	* returns BearerContextList
	******************************************************************************/
	std::list<BearerContext*>& SessionContext::getBearerContextContainer()
	{
		return BearerContext_m;
	}
	
	/******************************************************************************
	* find BearerContext ByBearerId
	******************************************************************************/
	BearerContext* SessionContext::findBearerContextByBearerId( uint8_t bearerId_i)
	{
		for( auto &it : BearerContext_m)
    		{
        		if(it->getBearerId() == bearerId_i)
        		{
            			return it;
        		}
    		}
    		return NULL;
	}
	
	/******************************************************************************
	* find BearerContext ByS1uSgwUserFteid
	******************************************************************************/
	BearerContext* SessionContext::findBearerContextByS1uSgwUserFteid( const Fteid& s1uSgwUserFteid_i)
	{
		for( auto &it : BearerContext_m)
    		{
        		if(it->getS1uSgwUserFteid() == s1uSgwUserFteid_i)
        		{
            			return it;
        		}
    		}
    		return NULL;
	}

	/******************************************************************************
	*******************************************************************************
	*							BearerContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	BearerContext::BearerContext():           
            s1uSgwUserFteid_m(),
            s5S8PgwUserFteid_m(),
            s1uEnbUserFteid_m(),
            bearerId_m(0),
            bearerQos_m(),
            bearerTftLen_m(0)
	{
		memset(bearerTft_m,0,sizeof(bearerTft_m));
	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	BearerContext::~BearerContext()
	{
	}	
	
	/******************************************************************************
	* sets s1uSgwUserFteid
	******************************************************************************/
	void BearerContext::setS1uSgwUserFteid( const Fteid& s1uSgwUserFteid_i )
	{
		s1uSgwUserFteid_m = s1uSgwUserFteid_i;
	}
	
	/******************************************************************************
	* returns s1uSgwUserFteid
	******************************************************************************/	
        const Fteid& BearerContext::getS1uSgwUserFteid() const
        {
                return s1uSgwUserFteid_m;
        }

	
	/******************************************************************************
	* sets s5S8PgwUserFteid
	******************************************************************************/
	void BearerContext::setS5S8PgwUserFteid( const Fteid& s5S8PgwUserFteid_i )
	{
		s5S8PgwUserFteid_m = s5S8PgwUserFteid_i;
	}
	
	/******************************************************************************
	* returns s5S8PgwUserFteid
	******************************************************************************/	
        const Fteid& BearerContext::getS5S8PgwUserFteid() const
        {
                return s5S8PgwUserFteid_m;
        }

	
	/******************************************************************************
	* sets s1uEnbUserFteid
	******************************************************************************/
	void BearerContext::setS1uEnbUserFteid( const Fteid& s1uEnbUserFteid_i )
	{
		s1uEnbUserFteid_m = s1uEnbUserFteid_i;
	}
	
	/******************************************************************************
	* returns s1uEnbUserFteid
	******************************************************************************/	
        const Fteid& BearerContext::getS1uEnbUserFteid() const
        {
                return s1uEnbUserFteid_m;
        }

	
	/******************************************************************************
	* sets bearerId
	******************************************************************************/
	void BearerContext::setBearerId( uint8_t bearerId_i )
	{
		bearerId_m = bearerId_i;
	}
	
	/******************************************************************************
	* returns bearerId
	******************************************************************************/	
        uint8_t BearerContext::getBearerId() const
        {
                return bearerId_m;
        }

	
	/******************************************************************************
	* sets bearerQos
	******************************************************************************/
	void BearerContext::setBearerQos( const bearer_qos_t& bearerQos_i )
	{
		bearerQos_m = bearerQos_i;
	}
	
	/******************************************************************************
	* returns bearerQos
	******************************************************************************/	
        const bearer_qos_t& BearerContext::getBearerQos() const
        {
                return bearerQos_m;
        }

	
	/******************************************************************************
	* sets bearerTft
	******************************************************************************/
	void BearerContext::setBearerTft( const uint8_t* bearerTft_i )
	{
		memcpy(bearerTft_m, bearerTft_i, (bearerTftLen_m * sizeof(uint8_t)));
	}
	
	/******************************************************************************
	* returns bearerTft
	******************************************************************************/	
        const uint8_t* BearerContext::getBearerTft() const
        {
                return bearerTft_m;
        }

	/******************************************************************************
        * set bearerTftLen
        ******************************************************************************/
        void BearerContext::setBearerTftLen(uint16_t bearerTftLen_i)
        {
                bearerTftLen_m = bearerTftLen_i;
        }

	/******************************************************************************
	* returns bearerTftLen
	******************************************************************************/	
	uint16_t BearerContext::getBearerTftLen() const
	{
    		return bearerTftLen_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeProcedureCtxt::MmeProcedureCtxt():           
            ctxtType_m(invalidProcedureType_c),
            mmeErrorCause_m(SUCCESS),
            s1apCause_m(),
            esmCause_m(NOT_SET),
            stateGuardTimerCtxt_m(NULL),
            authRespStatus_m(0),
            auts_m(),
            bearerId_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeProcedureCtxt::~MmeProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets ctxtType
	******************************************************************************/
	void MmeProcedureCtxt::setCtxtType( ProcedureType ctxtType_i )
	{
		ctxtType_m = ctxtType_i;
	}
	
	/******************************************************************************
	* returns ctxtType
	******************************************************************************/	
        ProcedureType MmeProcedureCtxt::getCtxtType() const
        {
                return ctxtType_m;
        }

	
	/******************************************************************************
	* sets mmeErrorCause
	******************************************************************************/
	void MmeProcedureCtxt::setMmeErrorCause( ERROR_CODES mmeErrorCause_i )
	{
		mmeErrorCause_m = mmeErrorCause_i;
	}
	
	/******************************************************************************
	* returns mmeErrorCause
	******************************************************************************/	
        ERROR_CODES MmeProcedureCtxt::getMmeErrorCause() const
        {
                return mmeErrorCause_m;
        }

	
	/******************************************************************************
	* sets s1apCause
	******************************************************************************/
	void MmeProcedureCtxt::setS1apCause( const S1apCause& s1apCause_i )
	{
		s1apCause_m = s1apCause_i;
	}
	
	/******************************************************************************
	* returns s1apCause
	******************************************************************************/	
        const S1apCause& MmeProcedureCtxt::getS1apCause() const
        {
                return s1apCause_m;
        }

	
	/******************************************************************************
	* sets esmCause
	******************************************************************************/
	void MmeProcedureCtxt::setEsmCause( const esm_cause_t& esmCause_i )
	{
		esmCause_m = esmCause_i;
	}
	
	/******************************************************************************
	* returns esmCause
	******************************************************************************/	
        const esm_cause_t& MmeProcedureCtxt::getEsmCause() const
        {
                return esmCause_m;
        }

	
	/******************************************************************************
	* sets stateGuardTimerCtxt
	******************************************************************************/
	void MmeProcedureCtxt::setStateGuardTimerCtxt( MmeUeTimerContext* stateGuardTimerCtxt_i )
	{
		stateGuardTimerCtxt_m = stateGuardTimerCtxt_i;
	}
	
	/******************************************************************************
	* returns stateGuardTimerCtxt
	******************************************************************************/	
        MmeUeTimerContext* MmeProcedureCtxt::getStateGuardTimerCtxt() const
        {
                return stateGuardTimerCtxt_m;
        }

	
	/******************************************************************************
	* sets authRespStatus
	******************************************************************************/
	void MmeProcedureCtxt::setAuthRespStatus( int authRespStatus_i )
	{
		authRespStatus_m = authRespStatus_i;
	}
	
	/******************************************************************************
	* returns authRespStatus
	******************************************************************************/	
        int MmeProcedureCtxt::getAuthRespStatus() const
        {
                return authRespStatus_m;
        }

	
	/******************************************************************************
	* sets auts
	******************************************************************************/
	void MmeProcedureCtxt::setAuts( const Auts& auts_i )
	{
		auts_m = auts_i;
	}
	
	/******************************************************************************
	* returns auts
	******************************************************************************/	
        const Auts& MmeProcedureCtxt::getAuts() const
        {
                return auts_m;
        }

	
	/******************************************************************************
	* sets bearerId
	******************************************************************************/
	void MmeProcedureCtxt::setBearerId( uint8_t bearerId_i )
	{
		bearerId_m = bearerId_i;
	}
	
	/******************************************************************************
	* returns bearerId
	******************************************************************************/	
        uint8_t MmeProcedureCtxt::getBearerId() const
        {
                return bearerId_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeAttachProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeAttachProcedureCtxt::MmeAttachProcedureCtxt():           
            esmInfoTxRequired_m(false),
            attachType_m(invalidAttachType_c),
            pcoOptionsLen_m(0),
            pti_m(0),
            requestedApn_m()
	{
		memset(pcoOptions_m,0,sizeof(pcoOptions_m));
	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeAttachProcedureCtxt::~MmeAttachProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets esmInfoTxRequired
	******************************************************************************/
	void MmeAttachProcedureCtxt::setEsmInfoTxRequired( bool esmInfoTxRequired_i )
	{
		esmInfoTxRequired_m = esmInfoTxRequired_i;
	}
	
	/******************************************************************************
	* returns esmInfoTxRequired
	******************************************************************************/	
        bool MmeAttachProcedureCtxt::getEsmInfoTxRequired() const
        {
                return esmInfoTxRequired_m;
        }

	
	/******************************************************************************
	* sets attachType
	******************************************************************************/
	void MmeAttachProcedureCtxt::setAttachType( AttachType attachType_i )
	{
		attachType_m = attachType_i;
	}
	
	/******************************************************************************
	* returns attachType
	******************************************************************************/	
        AttachType MmeAttachProcedureCtxt::getAttachType() const
        {
                return attachType_m;
        }

	
	/******************************************************************************
	* sets pcoOptions
	******************************************************************************/
	void MmeAttachProcedureCtxt::setPcoOptions( const uint8_t* pcoOptions_i )
	{
		memcpy(pcoOptions_m, pcoOptions_i, (pcoOptionsLen_m * sizeof(uint8_t)));
	}
	
	/******************************************************************************
	* returns pcoOptions
	******************************************************************************/	
        const uint8_t* MmeAttachProcedureCtxt::getPcoOptions() const
        {
                return pcoOptions_m;
        }

	/******************************************************************************
        * set pcoOptionsLen
        ******************************************************************************/
        void MmeAttachProcedureCtxt::setPcoOptionsLen(uint16_t pcoOptionsLen_i)
        {
                pcoOptionsLen_m = pcoOptionsLen_i;
        }

	/******************************************************************************
	* returns pcoOptionsLen
	******************************************************************************/	
	uint16_t MmeAttachProcedureCtxt::getPcoOptionsLen() const
	{
    		return pcoOptionsLen_m;
	}
	
	/******************************************************************************
	* sets pti
	******************************************************************************/
	void MmeAttachProcedureCtxt::setPti( uint8_t pti_i )
	{
		pti_m = pti_i;
	}
	
	/******************************************************************************
	* returns pti
	******************************************************************************/	
        uint8_t MmeAttachProcedureCtxt::getPti() const
        {
                return pti_m;
        }

	
	/******************************************************************************
	* sets requestedApn
	******************************************************************************/
	void MmeAttachProcedureCtxt::setRequestedApn( const Apn_name& requestedApn_i )
	{
		requestedApn_m = requestedApn_i;
	}
	
	/******************************************************************************
	* returns requestedApn
	******************************************************************************/	
        const Apn_name& MmeAttachProcedureCtxt::getRequestedApn() const
        {
                return requestedApn_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeDetachProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeDetachProcedureCtxt::MmeDetachProcedureCtxt():           
            detachType_m(invalidDetachType_c),
            cancellationType_m(INVALID_TYPE),
            nasDetachType_m(0),
            detachCause_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeDetachProcedureCtxt::~MmeDetachProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets detachType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setDetachType( DetachType detachType_i )
	{
		detachType_m = detachType_i;
	}
	
	/******************************************************************************
	* returns detachType
	******************************************************************************/	
        DetachType MmeDetachProcedureCtxt::getDetachType() const
        {
                return detachType_m;
        }

	
	/******************************************************************************
	* sets cancellationType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setCancellationType( CancellationType cancellationType_i )
	{
		cancellationType_m = cancellationType_i;
	}
	
	/******************************************************************************
	* returns cancellationType
	******************************************************************************/	
        CancellationType MmeDetachProcedureCtxt::getCancellationType() const
        {
                return cancellationType_m;
        }

	
	/******************************************************************************
	* sets nasDetachType
	******************************************************************************/
	void MmeDetachProcedureCtxt::setNasDetachType( uint32_t nasDetachType_i )
	{
		nasDetachType_m = nasDetachType_i;
	}
	
	/******************************************************************************
	* returns nasDetachType
	******************************************************************************/	
        uint32_t MmeDetachProcedureCtxt::getNasDetachType() const
        {
                return nasDetachType_m;
        }

	
	/******************************************************************************
	* sets detachCause
	******************************************************************************/
	void MmeDetachProcedureCtxt::setDetachCause( uint32_t detachCause_i )
	{
		detachCause_m = detachCause_i;
	}
	
	/******************************************************************************
	* returns detachCause
	******************************************************************************/	
        uint32_t MmeDetachProcedureCtxt::getDetachCause() const
        {
                return detachCause_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeS1RelProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeS1RelProcedureCtxt::MmeS1RelProcedureCtxt():           
            s1ReleaseTrigger_m(noTrigger_c),
            s1apEnbUeId_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeS1RelProcedureCtxt::~MmeS1RelProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets s1ReleaseTrigger
	******************************************************************************/
	void MmeS1RelProcedureCtxt::setS1ReleaseTrigger( S1ReleaseTrigger s1ReleaseTrigger_i )
	{
		s1ReleaseTrigger_m = s1ReleaseTrigger_i;
	}
	
	/******************************************************************************
	* returns s1ReleaseTrigger
	******************************************************************************/	
        S1ReleaseTrigger MmeS1RelProcedureCtxt::getS1ReleaseTrigger() const
        {
                return s1ReleaseTrigger_m;
        }

	
	/******************************************************************************
	* sets s1apEnbUeId
	******************************************************************************/
	void MmeS1RelProcedureCtxt::setS1apEnbUeId( uint32_t s1apEnbUeId_i )
	{
		s1apEnbUeId_m = s1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns s1apEnbUeId
	******************************************************************************/	
        uint32_t MmeS1RelProcedureCtxt::getS1apEnbUeId() const
        {
                return s1apEnbUeId_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeSvcReqProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeSvcReqProcedureCtxt::MmeSvcReqProcedureCtxt():           
            ddnSeqNo_m(0),
            pagingTrigger_m(0),
            epsBearerId_m(0),
            arp_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeSvcReqProcedureCtxt::~MmeSvcReqProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets ddnSeqNo
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setDdnSeqNo( uint32_t ddnSeqNo_i )
	{
		ddnSeqNo_m = ddnSeqNo_i;
	}
	
	/******************************************************************************
	* returns ddnSeqNo
	******************************************************************************/	
        uint32_t MmeSvcReqProcedureCtxt::getDdnSeqNo() const
        {
                return ddnSeqNo_m;
        }

	
	/******************************************************************************
	* sets pagingTrigger
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setPagingTrigger( uint32_t pagingTrigger_i )
	{
		pagingTrigger_m = pagingTrigger_i;
	}
	
	/******************************************************************************
	* returns pagingTrigger
	******************************************************************************/	
        uint32_t MmeSvcReqProcedureCtxt::getPagingTrigger() const
        {
                return pagingTrigger_m;
        }  
    
	/******************************************************************************
	* set pagingTriggerBit
	******************************************************************************/	
	void MmeSvcReqProcedureCtxt::setPagingTriggerBit(uint32_t pagingTriggerBit_i)
	{
		pagingTrigger_m |= pagingTriggerBit_i;
	}

	/******************************************************************************
	* clear pagingTriggerBit
	******************************************************************************/	
	void MmeSvcReqProcedureCtxt::clearPagingTriggerBit(uint32_t pagingTriggerBit_i)
	{
		pagingTrigger_m &= ~(pagingTriggerBit_i);
	}
	
	/******************************************************************************
	* check pagingTriggerBit
	******************************************************************************/	
	bool MmeSvcReqProcedureCtxt::checkPagingTriggerBit(uint32_t pagingTriggerBit_i)
	{
		if( pagingTrigger_m & pagingTriggerBit_i )
		    return true;
		return false;	    
	} 

	
	/******************************************************************************
	* sets epsBearerId
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setEpsBearerId( uint8_t epsBearerId_i )
	{
		epsBearerId_m = epsBearerId_i;
	}
	
	/******************************************************************************
	* returns epsBearerId
	******************************************************************************/	
        uint8_t MmeSvcReqProcedureCtxt::getEpsBearerId() const
        {
                return epsBearerId_m;
        }

	
	/******************************************************************************
	* sets arp
	******************************************************************************/
	void MmeSvcReqProcedureCtxt::setArp( const Arp& arp_i )
	{
		arp_m = arp_i;
	}
	
	/******************************************************************************
	* returns arp
	******************************************************************************/	
        const Arp& MmeSvcReqProcedureCtxt::getArp() const
        {
                return arp_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeTauProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeTauProcedureCtxt::MmeTauProcedureCtxt():           
            s1apEnbUeId_m(0),
            tai_m(),
            eUtranCgi_m(),
            enbFd_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeTauProcedureCtxt::~MmeTauProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets s1apEnbUeId
	******************************************************************************/
	void MmeTauProcedureCtxt::setS1apEnbUeId( uint32_t s1apEnbUeId_i )
	{
		s1apEnbUeId_m = s1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns s1apEnbUeId
	******************************************************************************/	
        uint32_t MmeTauProcedureCtxt::getS1apEnbUeId() const
        {
                return s1apEnbUeId_m;
        }

	
	/******************************************************************************
	* sets tai
	******************************************************************************/
	void MmeTauProcedureCtxt::setTai( const Tai& tai_i )
	{
		tai_m = tai_i;
	}
	
	/******************************************************************************
	* returns tai
	******************************************************************************/	
        const Tai& MmeTauProcedureCtxt::getTai() const
        {
                return tai_m;
        }

	
	/******************************************************************************
	* sets eUtranCgi
	******************************************************************************/
	void MmeTauProcedureCtxt::setEUtranCgi( const Cgi& eUtranCgi_i )
	{
		eUtranCgi_m = eUtranCgi_i;
	}
	
	/******************************************************************************
	* returns eUtranCgi
	******************************************************************************/	
        const Cgi& MmeTauProcedureCtxt::getEUtranCgi() const
        {
                return eUtranCgi_m;
        }

	
	/******************************************************************************
	* sets enbFd
	******************************************************************************/
	void MmeTauProcedureCtxt::setEnbFd( uint32_t enbFd_i )
	{
		enbFd_m = enbFd_i;
	}
	
	/******************************************************************************
	* returns enbFd
	******************************************************************************/	
        uint32_t MmeTauProcedureCtxt::getEnbFd() const
        {
                return enbFd_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							S1HandoverProcedureContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	S1HandoverProcedureContext::S1HandoverProcedureContext():           
            hoType_m(invalid_c),
            targetEnbContextId_m(0),
            targetS1apEnbUeId_m(0),
            targetTai_m(),
            targetCgi_m(),
            srcToTargetTransContainer_m(),
            targetToSrcTransContainer_m(),
            erabAdmittedItem_m(),
            s1HoCause_m(),
            srcEnbContextId_m(0),
            srcS1apEnbUeId_m(0)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	S1HandoverProcedureContext::~S1HandoverProcedureContext()
	{
	}	
	
	/******************************************************************************
	* sets hoType
	******************************************************************************/
	void S1HandoverProcedureContext::setHoType( HoType hoType_i )
	{
		hoType_m = hoType_i;
	}
	
	/******************************************************************************
	* returns hoType
	******************************************************************************/	
        HoType S1HandoverProcedureContext::getHoType() const
        {
                return hoType_m;
        }

	
	/******************************************************************************
	* sets targetEnbContextId
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetEnbContextId( uint32_t targetEnbContextId_i )
	{
		targetEnbContextId_m = targetEnbContextId_i;
	}
	
	/******************************************************************************
	* returns targetEnbContextId
	******************************************************************************/	
        uint32_t S1HandoverProcedureContext::getTargetEnbContextId() const
        {
                return targetEnbContextId_m;
        }

	
	/******************************************************************************
	* sets targetS1apEnbUeId
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetS1apEnbUeId( uint32_t targetS1apEnbUeId_i )
	{
		targetS1apEnbUeId_m = targetS1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns targetS1apEnbUeId
	******************************************************************************/	
        uint32_t S1HandoverProcedureContext::getTargetS1apEnbUeId() const
        {
                return targetS1apEnbUeId_m;
        }

	
	/******************************************************************************
	* sets targetTai
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetTai( const Tai& targetTai_i )
	{
		targetTai_m = targetTai_i;
	}
	
	/******************************************************************************
	* returns targetTai
	******************************************************************************/	
        const Tai& S1HandoverProcedureContext::getTargetTai() const
        {
                return targetTai_m;
        }

	
	/******************************************************************************
	* sets targetCgi
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetCgi( const Cgi& targetCgi_i )
	{
		targetCgi_m = targetCgi_i;
	}
	
	/******************************************************************************
	* returns targetCgi
	******************************************************************************/	
        const Cgi& S1HandoverProcedureContext::getTargetCgi() const
        {
                return targetCgi_m;
        }

	
	/******************************************************************************
	* sets srcToTargetTransContainer
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcToTargetTransContainer( const src_target_transparent_container& srcToTargetTransContainer_i )
	{
		srcToTargetTransContainer_m = srcToTargetTransContainer_i;
	}
	
	/******************************************************************************
	* returns srcToTargetTransContainer
	******************************************************************************/	
        const src_target_transparent_container& S1HandoverProcedureContext::getSrcToTargetTransContainer() const
        {
                return srcToTargetTransContainer_m;
        }

	
	/******************************************************************************
	* sets targetToSrcTransContainer
	******************************************************************************/
	void S1HandoverProcedureContext::setTargetToSrcTransContainer( const src_target_transparent_container& targetToSrcTransContainer_i )
	{
		targetToSrcTransContainer_m = targetToSrcTransContainer_i;
	}
	
	/******************************************************************************
	* returns targetToSrcTransContainer
	******************************************************************************/	
        const src_target_transparent_container& S1HandoverProcedureContext::getTargetToSrcTransContainer() const
        {
                return targetToSrcTransContainer_m;
        }

	
	/******************************************************************************
	* sets erabAdmittedItem
	******************************************************************************/
	void S1HandoverProcedureContext::setErabAdmittedItem( const ERAB_admitted& erabAdmittedItem_i )
	{
		erabAdmittedItem_m = erabAdmittedItem_i;
	}
	
	/******************************************************************************
	* returns erabAdmittedItem
	******************************************************************************/	
        const ERAB_admitted& S1HandoverProcedureContext::getErabAdmittedItem() const
        {
                return erabAdmittedItem_m;
        }

	
	/******************************************************************************
	* sets s1HoCause
	******************************************************************************/
	void S1HandoverProcedureContext::setS1HoCause( const S1apCause& s1HoCause_i )
	{
		s1HoCause_m = s1HoCause_i;
	}
	
	/******************************************************************************
	* returns s1HoCause
	******************************************************************************/	
        const S1apCause& S1HandoverProcedureContext::getS1HoCause() const
        {
                return s1HoCause_m;
        }

	
	/******************************************************************************
	* sets srcEnbContextId
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcEnbContextId( uint32_t srcEnbContextId_i )
	{
		srcEnbContextId_m = srcEnbContextId_i;
	}
	
	/******************************************************************************
	* returns srcEnbContextId
	******************************************************************************/	
        uint32_t S1HandoverProcedureContext::getSrcEnbContextId() const
        {
                return srcEnbContextId_m;
        }

	
	/******************************************************************************
	* sets srcS1apEnbUeId
	******************************************************************************/
	void S1HandoverProcedureContext::setSrcS1apEnbUeId( uint32_t srcS1apEnbUeId_i )
	{
		srcS1apEnbUeId_m = srcS1apEnbUeId_i;
	}
	
	/******************************************************************************
	* returns srcS1apEnbUeId
	******************************************************************************/	
        uint32_t S1HandoverProcedureContext::getSrcS1apEnbUeId() const
        {
                return srcS1apEnbUeId_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeErabModIndProcedureCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeErabModIndProcedureCtxt::MmeErabModIndProcedureCtxt():           
            erabToBeModifiedListLen_m(0),
            erabModifiedListLen_m(0)
	{
		memset(erabToBeModifiedList_m,0,sizeof(erabToBeModifiedList_m));

		memset(erabModifiedList_m,0,sizeof(erabModifiedList_m));
	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeErabModIndProcedureCtxt::~MmeErabModIndProcedureCtxt()
	{
	}	
	
	/******************************************************************************
	* sets erabToBeModifiedList
	******************************************************************************/
	void MmeErabModIndProcedureCtxt::setErabToBeModifiedList( const erab_to_be_modified_item* erabToBeModifiedList_i )
	{
		memcpy(erabToBeModifiedList_m, erabToBeModifiedList_i, (erabToBeModifiedListLen_m * sizeof(erab_to_be_modified_item)));
	}
	
	/******************************************************************************
	* returns erabToBeModifiedList
	******************************************************************************/	
        const erab_to_be_modified_item* MmeErabModIndProcedureCtxt::getErabToBeModifiedList() const
        {
                return erabToBeModifiedList_m;
        }

	/******************************************************************************
        * set erabToBeModifiedListLen
        ******************************************************************************/
        void MmeErabModIndProcedureCtxt::setErabToBeModifiedListLen(uint16_t erabToBeModifiedListLen_i)
        {
                erabToBeModifiedListLen_m = erabToBeModifiedListLen_i;
        }

	/******************************************************************************
	* returns erabToBeModifiedListLen
	******************************************************************************/	
	uint16_t MmeErabModIndProcedureCtxt::getErabToBeModifiedListLen() const
	{
    		return erabToBeModifiedListLen_m;
	}
	
	/******************************************************************************
	* sets erabModifiedList
	******************************************************************************/
	void MmeErabModIndProcedureCtxt::setErabModifiedList( const uint8_t* erabModifiedList_i )
	{
		memcpy(erabModifiedList_m, erabModifiedList_i, (erabModifiedListLen_m * sizeof(uint8_t)));
	}
	
	/******************************************************************************
	* returns erabModifiedList
	******************************************************************************/	
        const uint8_t* MmeErabModIndProcedureCtxt::getErabModifiedList() const
        {
                return erabModifiedList_m;
        }

	/******************************************************************************
        * set erabModifiedListLen
        ******************************************************************************/
        void MmeErabModIndProcedureCtxt::setErabModifiedListLen(uint16_t erabModifiedListLen_i)
        {
                erabModifiedListLen_m = erabModifiedListLen_i;
        }

	/******************************************************************************
	* returns erabModifiedListLen
	******************************************************************************/	
	uint16_t MmeErabModIndProcedureCtxt::getErabModifiedListLen() const
	{
    		return erabModifiedListLen_m;
	}
	
	/******************************************************************************
	*******************************************************************************
	*							MmeSmCreateBearerProcCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeSmCreateBearerProcCtxt::MmeSmCreateBearerProcCtxt():           
            createBearerReqEMsg_m(),
            bearerStatus_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeSmCreateBearerProcCtxt::~MmeSmCreateBearerProcCtxt()
	{
	}	

	/******************************************************************************
	* sets createBearerReqEMsg
	******************************************************************************/
	void MmeSmCreateBearerProcCtxt::setCreateBearerReqEMsg( std::shared_ptr<cmn::EventMessage> createBearerReqEMsg_i )
	{
		createBearerReqEMsg_m = std::move(createBearerReqEMsg_i);
	}
	
	/******************************************************************************
	* resets createBearerReqEMsg
	******************************************************************************/
	void MmeSmCreateBearerProcCtxt::resetCreateBearerReqEMsgPtr()
	{
		createBearerReqEMsg_m.reset();
	}
	
	/******************************************************************************
	* returns createBearerReqEMsg
	******************************************************************************/
	std::shared_ptr<cmn::EventMessage> MmeSmCreateBearerProcCtxt::getCreateBearerReqEMsg() const
	{
        	return createBearerReqEMsg_m;
	}
	
	/******************************************************************************
	* returns createBearerReqEMsgRaw
	******************************************************************************/
	cmn::EventMessage* MmeSmCreateBearerProcCtxt::getCreateBearerReqEMsgRaw() const
    	{
        	return createBearerReqEMsg_m.get();
    	}

	/******************************************************************************
	* add bearerStatus
	******************************************************************************/
	void MmeSmCreateBearerProcCtxt::addBearerStatus(BearerCtxtCBResp& bearerStatus_i)
	{
    		bearerStatus_m.push_back(bearerStatus_i);
	}
	
	/******************************************************************************
	* remove bearerStatus
	******************************************************************************/
	void MmeSmCreateBearerProcCtxt::removeBearerStatus(BearerCtxtCBResp& bearerStatus_i)
	{
    	    	bearerStatus_m.remove(bearerStatus_i);
	}
		
	/******************************************************************************
	* returns bearerStatusList
	******************************************************************************/
	std::list<BearerCtxtCBResp>& MmeSmCreateBearerProcCtxt::getBearerStatusContainer()
	{
		return bearerStatus_m;
	}

	/******************************************************************************
	* find bearerStatus
	******************************************************************************/
	std::list<BearerCtxtCBResp>::iterator MmeSmCreateBearerProcCtxt::findBearerStatus(BearerCtxtCBResp& bearerStatus_i)
	{
	    return std::find(std::begin(bearerStatus_m), std::end(bearerStatus_m), bearerStatus_i);
	}
	
	
	/******************************************************************************
	*******************************************************************************
	*							SmDedActProcCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	SmDedActProcCtxt::SmDedActProcCtxt():           
            linkedBearerId_m(0),
            triggerProc_m(invalidProcedureType_c)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	SmDedActProcCtxt::~SmDedActProcCtxt()
	{
	}	
	
	/******************************************************************************
	* sets linkedBearerId
	******************************************************************************/
	void SmDedActProcCtxt::setLinkedBearerId( uint8_t linkedBearerId_i )
	{
		linkedBearerId_m = linkedBearerId_i;
	}
	
	/******************************************************************************
	* returns linkedBearerId
	******************************************************************************/	
        uint8_t SmDedActProcCtxt::getLinkedBearerId() const
        {
                return linkedBearerId_m;
        }

	
	/******************************************************************************
	* sets triggerProc
	******************************************************************************/
	void SmDedActProcCtxt::setTriggerProc( ProcedureType triggerProc_i )
	{
		triggerProc_m = triggerProc_i;
	}
	
	/******************************************************************************
	* returns triggerProc
	******************************************************************************/	
        ProcedureType SmDedActProcCtxt::getTriggerProc() const
        {
                return triggerProc_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							MmeSmDeleteBearerProcCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	MmeSmDeleteBearerProcCtxt::MmeSmDeleteBearerProcCtxt():           
            deleteBearerReqEMsg_m(),
            bearerStatus_m(),
            lbiPresent_m(false)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	MmeSmDeleteBearerProcCtxt::~MmeSmDeleteBearerProcCtxt()
	{
	}	

	/******************************************************************************
	* sets deleteBearerReqEMsg
	******************************************************************************/
	void MmeSmDeleteBearerProcCtxt::setDeleteBearerReqEMsg( std::shared_ptr<cmn::EventMessage> deleteBearerReqEMsg_i )
	{
		deleteBearerReqEMsg_m = std::move(deleteBearerReqEMsg_i);
	}
	
	/******************************************************************************
	* resets deleteBearerReqEMsg
	******************************************************************************/
	void MmeSmDeleteBearerProcCtxt::resetDeleteBearerReqEMsgPtr()
	{
		deleteBearerReqEMsg_m.reset();
	}
	
	/******************************************************************************
	* returns deleteBearerReqEMsg
	******************************************************************************/
	std::shared_ptr<cmn::EventMessage> MmeSmDeleteBearerProcCtxt::getDeleteBearerReqEMsg() const
	{
        	return deleteBearerReqEMsg_m;
	}
	
	/******************************************************************************
	* returns deleteBearerReqEMsgRaw
	******************************************************************************/
	cmn::EventMessage* MmeSmDeleteBearerProcCtxt::getDeleteBearerReqEMsgRaw() const
    	{
        	return deleteBearerReqEMsg_m.get();
    	}

	/******************************************************************************
	* add bearerStatus
	******************************************************************************/
	void MmeSmDeleteBearerProcCtxt::addBearerStatus(BearerCtxtDBResp& bearerStatus_i)
	{
    		bearerStatus_m.push_back(bearerStatus_i);
	}
	
	/******************************************************************************
	* remove bearerStatus
	******************************************************************************/
	void MmeSmDeleteBearerProcCtxt::removeBearerStatus(BearerCtxtDBResp& bearerStatus_i)
	{
    	    	bearerStatus_m.remove(bearerStatus_i);
	}
		
	/******************************************************************************
	* returns bearerStatusList
	******************************************************************************/
	std::list<BearerCtxtDBResp>& MmeSmDeleteBearerProcCtxt::getBearerStatusContainer()
	{
		return bearerStatus_m;
	}

	/******************************************************************************
	* find bearerStatus
	******************************************************************************/
	std::list<BearerCtxtDBResp>::iterator MmeSmDeleteBearerProcCtxt::findBearerStatus(BearerCtxtDBResp& bearerStatus_i)
	{
	    return std::find(std::begin(bearerStatus_m), std::end(bearerStatus_m), bearerStatus_i);
	}
	
	
	/******************************************************************************
	* sets lbiPresent
	******************************************************************************/
	void MmeSmDeleteBearerProcCtxt::setLbiPresent( bool lbiPresent_i )
	{
		lbiPresent_m = lbiPresent_i;
	}
	
	/******************************************************************************
	* returns lbiPresent
	******************************************************************************/	
        bool MmeSmDeleteBearerProcCtxt::getLbiPresent() const
        {
                return lbiPresent_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							SmDedDeActProcCtxt
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	SmDedDeActProcCtxt::SmDedDeActProcCtxt():           
            linkedBearerId_m(0),
            triggerProc_m(invalidProcedureType_c)
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	SmDedDeActProcCtxt::~SmDedDeActProcCtxt()
	{
	}	
	
	/******************************************************************************
	* sets linkedBearerId
	******************************************************************************/
	void SmDedDeActProcCtxt::setLinkedBearerId( uint8_t linkedBearerId_i )
	{
		linkedBearerId_m = linkedBearerId_i;
	}
	
	/******************************************************************************
	* returns linkedBearerId
	******************************************************************************/	
        uint8_t SmDedDeActProcCtxt::getLinkedBearerId() const
        {
                return linkedBearerId_m;
        }

	
	/******************************************************************************
	* sets triggerProc
	******************************************************************************/
	void SmDedDeActProcCtxt::setTriggerProc( ProcedureType triggerProc_i )
	{
		triggerProc_m = triggerProc_i;
	}
	
	/******************************************************************************
	* returns triggerProc
	******************************************************************************/	
        ProcedureType SmDedDeActProcCtxt::getTriggerProc() const
        {
                return triggerProc_m;
        }

	
	/******************************************************************************
	*******************************************************************************
	*							X2HOMmProcedureContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	X2HOMmProcedureContext::X2HOMmProcedureContext():           
            pathSwitchReqEMsg_m(),
            targetTai_m(),
            targetCgi_m(),
            bearerStatus_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	X2HOMmProcedureContext::~X2HOMmProcedureContext()
	{
	}	

	/******************************************************************************
	* sets pathSwitchReqEMsg
	******************************************************************************/
	void X2HOMmProcedureContext::setPathSwitchReqEMsg( std::shared_ptr<cmn::EventMessage> pathSwitchReqEMsg_i )
	{
		pathSwitchReqEMsg_m = std::move(pathSwitchReqEMsg_i);
	}
	
	/******************************************************************************
	* resets pathSwitchReqEMsg
	******************************************************************************/
	void X2HOMmProcedureContext::resetPathSwitchReqEMsgPtr()
	{
		pathSwitchReqEMsg_m.reset();
	}
	
	/******************************************************************************
	* returns pathSwitchReqEMsg
	******************************************************************************/
	std::shared_ptr<cmn::EventMessage> X2HOMmProcedureContext::getPathSwitchReqEMsg() const
	{
        	return pathSwitchReqEMsg_m;
	}
	
	/******************************************************************************
	* returns pathSwitchReqEMsgRaw
	******************************************************************************/
	cmn::EventMessage* X2HOMmProcedureContext::getPathSwitchReqEMsgRaw() const
    	{
        	return pathSwitchReqEMsg_m.get();
    	}
	
	/******************************************************************************
	* sets targetTai
	******************************************************************************/
	void X2HOMmProcedureContext::setTargetTai( const Tai& targetTai_i )
	{
		targetTai_m = targetTai_i;
	}
	
	/******************************************************************************
	* returns targetTai
	******************************************************************************/	
        const Tai& X2HOMmProcedureContext::getTargetTai() const
        {
                return targetTai_m;
        }

	
	/******************************************************************************
	* sets targetCgi
	******************************************************************************/
	void X2HOMmProcedureContext::setTargetCgi( const Cgi& targetCgi_i )
	{
		targetCgi_m = targetCgi_i;
	}
	
	/******************************************************************************
	* returns targetCgi
	******************************************************************************/	
        const Cgi& X2HOMmProcedureContext::getTargetCgi() const
        {
                return targetCgi_m;
        }

	/******************************************************************************
	* add bearerStatus
	******************************************************************************/
	void X2HOMmProcedureContext::addBearerStatus(PdnHoStatus& bearerStatus_i)
	{
    		bearerStatus_m.push_back(bearerStatus_i);
	}
	
	/******************************************************************************
	* remove bearerStatus
	******************************************************************************/
	void X2HOMmProcedureContext::removeBearerStatus(PdnHoStatus& bearerStatus_i)
	{
		for( auto i = bearerStatus_m.begin(); i != bearerStatus_m.end(); i++)
    		{
        		if((*i) == bearerStatus_i)
        		{
            			bearerStatus_m.erase(i);
				break;
        		}
    		}  	
	}
		
	/******************************************************************************
	* returns bearerStatusContainer
	******************************************************************************/
	std::vector<PdnHoStatus>& X2HOMmProcedureContext::getBearerStatusContainer()
	{
		return bearerStatus_m;
	}
	
	/******************************************************************************
	* find bearerStatus
	******************************************************************************/
	std::vector<PdnHoStatus>::iterator X2HOMmProcedureContext::findBearerStatus(PdnHoStatus& bearerStatus_i)
	{
	    return std::find(std::begin(bearerStatus_m), std::end(bearerStatus_m), bearerStatus_i);
	}
	

	
	/******************************************************************************
	*******************************************************************************
	*							X2HOSmProcedureContext
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	X2HOSmProcedureContext::X2HOSmProcedureContext():           
            pathSwitchReqMsg_m(),
            erabFailedList_m()
	{	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	X2HOSmProcedureContext::~X2HOSmProcedureContext()
	{
	}	

	/******************************************************************************
	* sets pathSwitchReqMsg
	******************************************************************************/
	void X2HOSmProcedureContext::setPathSwitchReqMsg( std::shared_ptr<cmn::EventMessage> pathSwitchReqMsg_i )
	{
		pathSwitchReqMsg_m = std::move(pathSwitchReqMsg_i);
	}
	
	/******************************************************************************
	* resets pathSwitchReqMsg
	******************************************************************************/
	void X2HOSmProcedureContext::resetPathSwitchReqMsgPtr()
	{
		pathSwitchReqMsg_m.reset();
	}
	
	/******************************************************************************
	* returns pathSwitchReqMsg
	******************************************************************************/
	std::shared_ptr<cmn::EventMessage> X2HOSmProcedureContext::getPathSwitchReqMsg() const
	{
        	return pathSwitchReqMsg_m;
	}
	
	/******************************************************************************
	* returns pathSwitchReqMsgRaw
	******************************************************************************/
	cmn::EventMessage* X2HOSmProcedureContext::getPathSwitchReqMsgRaw() const
    	{
        	return pathSwitchReqMsg_m.get();
    	}
	
	/******************************************************************************
	* sets erabFailedList
	******************************************************************************/
	void X2HOSmProcedureContext::setErabFailedList( erab_list& erabFailedList_i )
	{
		erabFailedList_m = erabFailedList_i;
	}
	
	/******************************************************************************
	* returns erabFailedList
	******************************************************************************/	
        erab_list& X2HOSmProcedureContext::getErabFailedList()
        {
                return erabFailedList_m;
        }   

	
} // mme
