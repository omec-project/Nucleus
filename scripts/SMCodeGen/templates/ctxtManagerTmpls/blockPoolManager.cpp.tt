 [%- DataBlock = TemplateInputVar %]
 [%- includeList = includes %]
 [%- dataGroupName = "" -%]
 [%- USE String %]
 [%- PROCESS templates/ctxtManagerTmpls/commonMacro.tt | trim %]
 [%- poolMgrClassName = CLASSNAME(DataBlock.BlockName, "Manager") -%]
 /*
 * Copyright [%CURRENTYEAR%]-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */ 
/******************************************************************************
 * [% FILENAME(DataBlock.BlockName, "Manager") %].cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/blockPoolManager.cpp.tt>
 ******************************************************************************/

#include "memPoolManager.h"
[% FOREACH header IN includeList.split(',') -%]
#include "[% header %]"
[%- IF header.search('ontextManager') -%]
[%- dataGroupName = header.split("/").first -%]
[%- END -%]
[% END %]
#include "[% dataGroupName %]/[% FILENAME(DataBlock.BlockName, "Manager") %].h"

using namespace cmn::memPool;

namespace mme
{
	/******************************************************************************
	* Constructor
	******************************************************************************/
	[%poolMgrClassName%]::[%poolMgrClassName%](int numOfBlocks):poolManager_m(numOfBlocks)
	{
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	[%poolMgrClassName%]::~[%poolMgrClassName%]()
	{
	}
	
	/******************************************************************************
	* Allocate [% DataBlock.BlockName %] data block
	******************************************************************************/
	[% DataBlock.BlockName %]* [%poolMgrClassName%]::allocate[% DataBlock.BlockName %]()
	{
		[% DataBlock.BlockName %]* [% DataBlock.BlockName %]_p = poolManager_m.allocate();
		return [% DataBlock.BlockName %]_p;
	}
	
	/******************************************************************************
	* Deallocate a [% DataBlock.BlockName %] data block
	******************************************************************************/
	void [%poolMgrClassName%]::deallocate[% DataBlock.BlockName %]([% DataBlock.BlockName %]* [% DataBlock.BlockName %]p )
	{
		poolManager_m.free( [% DataBlock.BlockName %]p );
	}
}