 [%- DataGroup = TemplateInputVar %]
 [%- USE String %]
 [%- PROCESS templates/ctxtManagerTmpls/commonMacro.tt | trim -%]
 [%- ifdefStr = String.new(DataGroup.DgName).upper.text() -%]
/*
 * Copyright [%CURRENTYEAR%]-present, Infosys Limited.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#ifndef __[% ifdefStr %]_DATAGROUPMANAGER__
#define __[% ifdefStr %]_DATAGROUPMANAGER__
/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/subsDataGroupManager.h.tt>
 ***************************************/
#include <unordered_map>
#include <mutex>
#include "dataGroupManager.h"

[%- IF DataGroup.DgName == 'Subs' %]
#include "contextManager/dataBlocks.h"
[%- FOREACH DataBlock = DataGroup.DataBlocks %]
#include "contextManager/[% FILENAME(DataBlock.BlockName, "Manager") %].h"
[%- END %]
[%- ELSE -%]
#include "[% FILENAME(DataGroup.DgName) %]ContextManager/[%  FILENAME(DataGroup.DgName) %]DataBlocks.h"
[%- FOREACH DataBlock = DataGroup.DataBlocks %]
#include "[% FILENAME(DataGroup.DgName) %]ContextManager/[% FILENAME(DataBlock.BlockName, "Manager") %].h"
[%- END %]
[%- END %]
namespace mme
{	
	class [% DataGroup.DgName %]DataGroupManager:public cmn::DGM::DataGroupManager
	{
		public:
		
			/******************************************
			* Instance 
			*    Creates static instance for the [% DataGroup.DgName %]DataGroupManager
			*******************************************/
			static [% DataGroup.DgName %]DataGroupManager* Instance();
	
			/****************************************
			* [% DataGroup.DgName %]DataGroupManager
			*    Destructor
			****************************************/
			virtual ~[% DataGroup.DgName %]DataGroupManager();
			
			/******************************************
			* initialize
			* Initializes control block and pool managers
			******************************************/
			void initialize();

			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			/******************************************
			 * get[% DataBlock.BlockName %]
			 * Get [% DataBlock.BlockName %] data block
			 ******************************************/
			[% DataBlock.BlockName %]* get[% DataBlock.BlockName %]();
			
			/******************************************
			 * delete[% DataBlock.BlockName %]
			 *  Delete a [% DataBlock.BlockName %] data block
			 ******************************************/
			void delete[% DataBlock.BlockName %]([% DataBlock.BlockName %]* [% DataBlock.BlockName %]p );
			[%- END %]
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
				[%- FOREACH Data = DataBlock.Data %]
					[%- IF Data.Key == 'Yes' %]
			/******************************************
			* add[% Data.Name %]key
			* Add a [% Data.Name %] as key and cb index as value to [% Data.Name %]_cb_id_map
			******************************************/
			int add[% Data.Name %]key( [% Data.Type %] key, int cb_index );
			
			/******************************************
			* delete[% Data.Name %]key
			* delete a [% Data.Name %] key from [% Data.Name %]_cb_id_map
			******************************************/		
			int delete[% Data.Name %]key( [% Data.Type %] key );
			
			/******************************************
			* size[% Data.Name %]KeyMap
			* size of [% Data.Name %]_cb_id_map
			******************************************/		
			int size[% String.new(Data.Name).capital.text() %]KeyMap();
			
			/******************************************
			* findCBWith[% Data.Name %]
			* Find cb with given [% Data.Name %] from [% Data.Name %]_cb_id_map
			******************************************/	
			int findCBWith[% Data.Name %]( [% Data.Type %] key );
					[%- END %]
				[%- END %]
			[%- END %]
			
			
		private:
			
			/****************************************
			* [% DataGroup.DgName %]DataGroupManager
			*    Private constructor
			****************************************/
			[% DataGroup.DgName %]DataGroupManager();
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			/****************************************
			* [% DataBlock.BlockName %] Pool Manager
			****************************************/
			[% CLASSNAME(DataBlock.BlockName, "Manager") %]* [% CLASSNAME(DataBlock.BlockName, "Manager") %]m_p;
			
			[%- END %]
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
				[%- FOREACH Data = DataBlock.Data %]
					[%- IF Data.Key == 'Yes' %]
			/****************************************
			* [% Data.Name %] Key Map
			****************************************/
			[%- IF Data.Hash == '' %]
			std::unordered_map<[% Data.Type %],int> [% Data.Name %]_cb_id_map;
			[%- ELSE %]
			std::unordered_map<[% Data.Type %], int , [% Data.Hash %]> [% Data.Name %]_cb_id_map;
			[%- END %]
			
			/****************************************
			* [% Data.Name %] Key Map
			****************************************/
			std::mutex [% Data.Name %]_cb_id_map_mutex;
					[%- END %]
				[%- END %]
			[%- END %]
	};
};

#endif
