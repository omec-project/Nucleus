 [%- DataBlock = TemplateInputVar %]
 [%- USE String %]
 [%- PROCESS templates/ctxtManagerTmpls/commonMacro.tt | trim %]
 [%- poolMgrClassName = CLASSNAME(DataBlock.BlockName, "Manager") -%]
 /*
 * Copyright [%CURRENTYEAR%]-present, Infosys Limited.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#ifndef __[% poolMgrClassName %]__
#define __[% poolMgrClassName %]__
/******************************************************
* [% FILENAME(DataBlock.BlockName, "Manager") %].h
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/blockPoolManager.h.tt>
 ***************************************/
#include "memPoolManager.h"

namespace mme
{
	class [%DataBlock.BlockName%];
	class [%poolMgrClassName%]
	{
		public:
			/****************************************
			* [% poolMgrClassName %]
			*  constructor
			****************************************/
			[%poolMgrClassName%](int numOfBlocks);
			
			/****************************************
			* [% poolMgrClassName %]
			*    Destructor
			****************************************/
			~[%poolMgrClassName%]();
			
			/******************************************
			 * allocate[% DataBlock.BlockName %]
			 * allocate [% DataBlock.BlockName %] data block
			 ******************************************/
			[% DataBlock.BlockName %]* allocate[% DataBlock.BlockName %]();
			
			/******************************************
			 * deallocate[% DataBlock.BlockName %]
			 * deallocate a [% DataBlock.BlockName %] data block
			 ******************************************/
			void deallocate[% DataBlock.BlockName %]([% DataBlock.BlockName %]* [% DataBlock.BlockName %]p );
	
		private:
			cmn::memPool::MemPoolManager<[% DataBlock.BlockName %]> poolManager_m;
	};
};

#endif
		
		
