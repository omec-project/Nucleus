	/******************************************************************************
	* add [% Item.Name %]
	******************************************************************************/
	[%- Param.Name = Item.Name %][%- Param.Type = listType.1 %][%- Param.Properties.accessor = "mutable" %]
	bool [% dataBlockClassName %]::add[% String.new(Item.Name).capital.text() %]([% ARG(Param, "set")%])
	{
		if([% Item.Name %]Count_m < [% Item.Name %]_m.size())
		{
			[% Item.Name %]_m[[% Item.Name %]Count_m] = [% Item.Name %]_i;
			[% Item.Name %]Count_m++;
			return true;
		}
		return false;
	}
	
	/******************************************************************************
	* remove [% Item.Name %]
	******************************************************************************/
	void [% dataBlockClassName %]::remove[% String.new(Item.Name).capital.text() %]([% ARG(Param, "set")%])
	{
		for(int i = 0; i < [% Item.Name %]Count_m; i++)
        	{
            		if([% Item.Name %]_m[i] == [% Item.Name %]_i)
            		{
                		for(int j = i; j < ([% Item.Name %]Count_m - 1); j++)
                		{
                    			[% Item.Name %]_m[j] = [% Item.Name %]_m[j+1];
                		}
                		[% Item.Name %]Count_m = [% Item.Name %]Count_m - 1;
        			break;
        		}
        	}
	}
		
	/******************************************************************************
	* returns [% Item.Name %]Container
	******************************************************************************/
	[% Item.Type %]& [% dataBlockClassName %]::get[% String.new(Item.Name).capital.text() %]Container()
	{
		return [% Item.Name %]_m;
	}
	
	/******************************************************************************
	* returns [% String.new(Item.Name).capital.text() %]Count
	******************************************************************************/
	uint16_t [% dataBlockClassName %]::get[% String.new(Item.Name).capital.text() %]Count()
	{
		return [% Item.Name %]Count_m;
	}
	[%-IF Item.defined('Properties') == 1 && Item.Properties.defined('FindBy') %]
	[%-IF primitiveTypes.grep("$listType.2").size != 0 || listType.3=='*'%]
	[%- FOREACH id = Item.Properties.FindBy %]
	
	/******************************************************************************
	* find [% Item.Name %] By[% String.new(id.Name).capital.text() %]
	******************************************************************************/
	[% listType.1 %] [% dataBlockClassName %]::find[% String.new(Item.Name).capital.text() %]By[% String.new(id.Name).capital.text() %]( [% ARG(id,"set")%])
	{
		for( auto &it : [% Item.Name %]_m)
    		{
        		if(it[% access_op %]get[% String.new(id.Name).capital.text() %]() == [% id.Name %]_i)
        		{
            			return it;
        		}
    		}
    		return [%-IF listType.3=='*'-%]NULL[%- ELSE -%]0[%- END -%];
	}
	[%- END %]
	[%- ELSE %]
	[%- FOREACH id = Item.Properties.FindBy %]
	
	/******************************************************************************
	* find [% Item.Name %] By[% String.new(id.Name).capital.text() %]
	******************************************************************************/
	bool [% dataBlockClassName %]::find[% String.new(Item.Name).capital.text() %]By[% String.new(id.Name).capital.text() %]( [% ARG(id,"set")%], [% ARG(Param, "set")%])
	{
		for( auto &it : [% Item.Name %]_m)
    		{
        		if(it[% access_op %]get[% String.new(id.Name).capital.text() %]() == [% id.Name %]_i)
        		{
            			[% Item.Name %]_i = it;
            			return true;
        		}
    		}
    		return false;
	}
	[%- END %]
	[%- END %]
	[%- ELSE %]

	/******************************************************************************
	* find [% Item.Name %]
	******************************************************************************/
	[% Item.Type %]::iterator [% dataBlockClassName %]::find[% String.new(Item.Name).capital.text() %]([% ARG(Param, "set")%])
	{
	    return std::find(std::begin([% Item.Name %]_m), std::end([% Item.Name %]_m), [% Item.Name %]_i);
	}
	[% END %]
