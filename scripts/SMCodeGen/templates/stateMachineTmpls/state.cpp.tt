 [%- PROCESS templates/stateMachineTmpls/macros.tt %]
 [%- State = TemplateInputVar %]
 [%- stateClassName = CLASSNAME(State.Name) %]
 [%- stateGuardTimerDuration = GET_STATE_GUARD_TIMER_VAL(State.Name, AppModelJSON) %]
/*
 * Copyright 2020-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 * [% FILENAME(State.Name) %].cpp
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/state.cpp.tt>
 **************************************/


#include "actionTable.h"
#include "actionHandlers/actionHandlers.h"
#include "mmeSmDefs.h"
#include "utils/mmeStatesUtils.h"
#include "utils/mmeTimerTypes.h"

#include "mmeStates/[% FILENAME(State.Name) %].h"
[%- stateList = [] -%]
[%- FOREACH Event IN State.Events %]
[%- IF Event.NextState != "end_state" && Event.NextState != State.Name && !stateList.grep(Event.NextState).size %]
[%- stateList.push(Event.NextState) %]
[%- END %]
[%- END %]
[%- WHILE 0 < stateList.size %]	
#include "mmeStates/[% FILENAME(stateList.shift) %].h"
[%- END %]

using namespace mme;
using namespace SM;

/******************************************************************************
* Constructor
******************************************************************************/
[%- IF stateGuardTimerDuration == '0' %]
[% stateClassName %]::[% stateClassName %]():State([% State.Name %])
[%- ELSE %]
[% stateClassName %]::[% stateClassName %]():State([% State.Name %], [% stateGuardTimerDuration %])
[%- END %]
{
        stateEntryAction = &MmeStatesUtils::on_state_entry;
        stateExitAction = &MmeStatesUtils::on_state_exit;
        eventValidator = &MmeStatesUtils::validate_event;
}

/******************************************************************************
* Destructor
******************************************************************************/
[% stateClassName %]::~[% stateClassName %]()
{
}

/******************************************************************************
* creates and returns static instance
******************************************************************************/
[% stateClassName %]* [% stateClassName %]::Instance()
{
        static [% stateClassName %] state;
        return &state;
}

/******************************************************************************
* initializes eventToActionsMap
******************************************************************************/
void [% stateClassName %]::initialize()
{
        [%- FOREACH Event = State.Events %]
        {
                ActionTable actionTable;
                [%- FOREACH Action = Event.Actions %]
                actionTable.addAction(&ActionHandlers::[% String.new(Action).lower %]);
                [%- END %]
				[%- IF Event.NextState != "end_state" %]
                actionTable.setNextState([% CLASSNAME(Event.NextState) %]::Instance());
                [%- END %]
                eventToActionsMap.insert(pair<uint16_t, ActionTable>([% Event.Name %], actionTable));
        }
        [%- END %]
}
