[%- genericEventsList = [ 'DEFAULT_EVENT' 'ABORT_EVENT' 'STATE_GUARD_TIMEOUT' ] %]
[%- stateList = [] %]
[%- eventList = [] %]
[%- FOREACH ProcedureList = TemplateInputVar %]
    [%- FOREACH Procedure = ProcedureList %]
        [%- FOREACH State = Procedure.States %]
                [%- stateList.push(State.Name) %]
            [%- FOREACH Event = State.Events %]
                [%- eventList.push(Event.Name) %]
            [%- END %]
        [%- END %]
    [%- END %]
[%- END %]
[%- eventList = eventList.merge(genericEventsList) %]
[%- stateList = stateList.unique.sort %]
[%- eventList = eventList.unique.sort %]
/*
 * Copyright 2019-present, Infosys Limited.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <mmeSmDefs.h>
#include <smTypes.h>
#include <string>
/**************************************
 * 
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/stateMachineTmpls/mmeSmDefs.cpp.tt>
 **************************************/
using namespace std;
using namespace SM;

SM::SmUtility* smUtil = SM::SmUtility::Instance();

void populateEventStringMap()
{
    [%- FOREACH event = eventList %]
    smUtil->addEventToStrEntry([% event %],"[% event %]");      
    [%- END %]
}

void populateStateStringMap()
{
    smUtil->addStateToStrEntry(default_state,"default_state");
    [%- FOREACH state = stateList %]
    smUtil->addStateToStrEntry([% state %],"[% state %]");
    [%- END %]
}
